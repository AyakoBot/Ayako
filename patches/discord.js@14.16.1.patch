diff --git a/typings/index.d.ts b/typings/index.d.ts
index 1dc3d97ea94ad5d707d01cb4c587568bf08b82af..6bdacf47599726353d345b186a43590460bf64e7 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -1,3 +1,5 @@
+import Util from '@ayako/bot/src/BaseClient/Bot/Util.js';
+import * as Sharding from 'discord-hybrid-sharding';
 import {
   ActionRowBuilder as BuilderActionRow,
   MessageActionRowComponentBuilder,
@@ -387,32 +389,6 @@ export class AutoModerationRule extends Base {
   public enabled: boolean;
   public exemptRoles: Collection<Snowflake, Role>;
   public exemptChannels: Collection<Snowflake, GuildBasedChannel>;
-  public edit(options: AutoModerationRuleEditOptions): Promise<AutoModerationRule>;
-  public delete(reason?: string): Promise<void>;
-  public setName(name: string, reason?: string): Promise<AutoModerationRule>;
-  public setEventType(eventType: AutoModerationRuleEventType, reason?: string): Promise<AutoModerationRule>;
-  public setKeywordFilter(keywordFilter: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setRegexPatterns(regexPatterns: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setPresets(
-    presets: readonly AutoModerationRuleKeywordPresetType[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setAllowList(allowList: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setMentionTotalLimit(mentionTotalLimit: number, reason?: string): Promise<AutoModerationRule>;
-  public setMentionRaidProtectionEnabled(
-    mentionRaidProtectionEnabled: boolean,
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setActions(actions: readonly AutoModerationActionOptions[], reason?: string): Promise<AutoModerationRule>;
-  public setEnabled(enabled?: boolean, reason?: string): Promise<AutoModerationRule>;
-  public setExemptRoles(
-    roles: ReadonlyCollection<Snowflake, Role> | readonly RoleResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setExemptChannels(
-    channels: ReadonlyCollection<Snowflake, GuildBasedChannel> | readonly GuildChannelResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
 }
 
 export abstract class Application extends Base {
@@ -439,8 +415,6 @@ export class ApplicationCommand<PermissionsFetchType = {}> extends Base {
   public description: string;
   public descriptionLocalizations: LocalizationMap | null;
   public descriptionLocalized: string | null;
-  /** @deprecated Use {@link ApplicationCommand.contexts} instead */
-  public dmPermission: boolean | null;
   public guild: Guild | null;
   public guildId: Snowflake | null;
   public get manager(): ApplicationCommandManager;
@@ -459,21 +433,6 @@ export class ApplicationCommand<PermissionsFetchType = {}> extends Base {
   public type: ApplicationCommandType;
   public version: Snowflake;
   public nsfw: boolean;
-  public delete(): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public edit(data: Partial<ApplicationCommandData>): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setName(name: string): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setNameLocalizations(nameLocalizations: LocalizationMap): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setDescription(description: string): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setDescriptionLocalizations(
-    descriptionLocalizations: LocalizationMap,
-  ): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setDefaultMemberPermissions(
-    defaultMemberPermissions: PermissionResolvable | null,
-  ): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setDMPermission(dmPermission?: boolean): Promise<ApplicationCommand<PermissionsFetchType>>;
-  public setOptions(
-    options: readonly ApplicationCommandOptionData[],
-  ): Promise<ApplicationCommand<PermissionsFetchType>>;
   public equals(
     command: ApplicationCommand | ApplicationCommandData | RawApplicationCommandData,
     enforceOptionOrder?: boolean,
@@ -600,11 +559,6 @@ export abstract class CommandInteraction<Cached extends CacheType = CacheType> e
       | ModalComponentData
       | APIModalInteractionResponseCallbackData,
   ): Promise<void>;
-  /** @deprecated Sending a premium-style button is the new Discord behaviour. */
-  public sendPremiumRequired(): Promise<void>;
-  public awaitModalSubmit(
-    options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
-  ): Promise<ModalSubmitInteraction<Cached>>;
   private transformOption(
     option: APIApplicationCommandOption,
     resolved: APIApplicationCommandInteractionData['resolved'],
@@ -618,12 +572,6 @@ export class InteractionResponse<Cached extends boolean = boolean> {
   public id: Snowflake;
   public get createdAt(): Date;
   public get createdTimestamp(): number;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, Cached>,
-  ): Promise<MappedInteractionTypes<Cached>[ComponentType]>;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, Cached>,
-  ): InteractionCollector<MappedInteractionTypes<Cached>[ComponentType]>;
   public delete(): Promise<void>;
   public edit(options: string | MessagePayload | WebhookMessageEditOptions): Promise<Message>;
   public fetch(): Promise<Message>;
@@ -640,7 +588,6 @@ export abstract class BaseGuild extends Base {
   public get nameAcronym(): string;
   public get partnered(): boolean;
   public get verified(): boolean;
-  public fetch(): Promise<Guild>;
   public iconURL(options?: ImageURLOptions): string | null;
   public toString(): string;
 }
@@ -668,15 +615,6 @@ export class BaseGuildTextChannel extends GuildChannel {
   public nsfw: boolean;
   public threads: GuildTextThreadManager<AllowedThreadTypeForTextChannel | AllowedThreadTypeForNewsChannel>;
   public topic: string | null;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setType(type: ChannelType.GuildText, reason?: string): Promise<TextChannel>;
-  public setType(type: ChannelType.GuildAnnouncement, reason?: string): Promise<NewsChannel>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -692,12 +630,6 @@ export class BaseGuildVoiceChannel extends GuildChannel {
   public rtcRegion: string | null;
   public userLimit: number;
   public videoQualityMode: VideoQualityMode | null;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setBitrate(bitrate: number, reason?: string): Promise<this>;
-  public setRTCRegion(rtcRegion: string | null, reason?: string): Promise<this>;
-  public setUserLimit(userLimit: number, reason?: string): Promise<this>;
-  public setVideoQualityMode(videoQualityMode: VideoQualityMode, reason?: string): Promise<this>;
 }
 
 export type EnumLike<Enum, Value> = Record<keyof Enum, Value>;
@@ -782,13 +714,6 @@ export class StringSelectMenuBuilder extends BuilderStringSelectMenuComponent {
   ): StringSelectMenuBuilder;
 }
 
-export {
-  /** @deprecated Use {@link StringSelectMenuBuilder} instead */
-  StringSelectMenuBuilder as SelectMenuBuilder,
-  /** @deprecated Use {@link StringSelectMenuOptionBuilder} instead */
-  StringSelectMenuOptionBuilder as SelectMenuOptionBuilder,
-};
-
 export class UserSelectMenuBuilder extends BuilderUserSelectMenuComponent {
   public constructor(data?: Partial<UserSelectMenuComponentData | APIUserSelectComponent>);
   public static from(other: JSONEncodable<APIUserSelectComponent> | APIUserSelectComponent): UserSelectMenuBuilder;
@@ -849,11 +774,6 @@ export class StringSelectMenuComponent extends BaseSelectMenuComponent<APIString
   public get options(): APISelectMenuOption[];
 }
 
-export {
-  /** @deprecated Use {@link StringSelectMenuComponent} instead */
-  StringSelectMenuComponent as SelectMenuComponent,
-};
-
 export class UserSelectMenuComponent extends BaseSelectMenuComponent<APIUserSelectComponent> {}
 
 export class RoleSelectMenuComponent extends BaseSelectMenuComponent<APIRoleSelectComponent> {}
@@ -968,8 +888,6 @@ export abstract class BaseChannel extends Base {
   public get partial(): false;
   public type: ChannelType;
   public get url(): string;
-  public delete(): Promise<this>;
-  public fetch(force?: boolean): Promise<this>;
   public isThread(): this is AnyThreadChannel;
   public isTextBased(): this is TextBasedChannel;
   public isDMBased(): this is PartialGroupDMChannel | DMChannel | PartialDMChannel;
@@ -993,6 +911,8 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   private get _censoredToken(): string | null;
   // This a technique used to brand the ready state. Or else we'll get `never` errors on typeguard checks.
   private readonly _ready: Ready;
+  public util: typeof Util;
+  public cluster?: Sharding.ClusterClient<typeof this>;
 
   // Override inherited static EventEmitter methods, with added type checks for Client events.
   public static once<Emitter extends EventEmitter, Event extends keyof ClientEvents>(
@@ -1022,19 +942,6 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   public voice: ClientVoiceManager;
   public ws: WebSocketManager;
   public destroy(): Promise<void>;
-  public deleteWebhook(id: Snowflake, options?: WebhookDeleteOptions): Promise<void>;
-  public fetchGuildPreview(guild: GuildResolvable): Promise<GuildPreview>;
-  public fetchInvite(invite: InviteResolvable, options?: ClientFetchInviteOptions): Promise<Invite>;
-  public fetchGuildTemplate(template: GuildTemplateResolvable): Promise<GuildTemplate>;
-  public fetchVoiceRegions(): Promise<Collection<string, VoiceRegion>>;
-  public fetchSticker(id: Snowflake): Promise<Sticker>;
-  public fetchStickerPacks(options: { packId: Snowflake }): Promise<StickerPack>;
-  public fetchStickerPacks(options?: StickerPackFetchOptions): Promise<Collection<Snowflake, StickerPack>>;
-  /** @deprecated Use {@link Client.fetchStickerPacks} instead. */
-  public fetchPremiumStickerPacks(): ReturnType<Client['fetchStickerPacks']>;
-  public fetchWebhook(id: Snowflake, token?: string): Promise<Webhook>;
-  public fetchGuildWidget(guild: GuildResolvable): Promise<Widget>;
-  public generateInvite(options?: InviteGenerationOptions): string;
   public login(token?: string): Promise<string>;
   public isReady(): this is Client<true>;
   public toJSON(): unknown;
@@ -1091,13 +998,6 @@ export class ClientApplication extends Application {
   public interactionsEndpointURL: string | null;
   public roleConnectionsVerificationURL: string | null;
   public rpcOrigins: string[];
-  public edit(options: ClientApplicationEditOptions): Promise<ClientApplication>;
-  public fetch(): Promise<ClientApplication>;
-  public fetchRoleConnectionMetadataRecords(): Promise<ApplicationRoleConnectionMetadata[]>;
-  public fetchSKUs(): Promise<Collection<Snowflake, SKU>>;
-  public editRoleConnectionMetadataRecords(
-    records: readonly ApplicationRoleConnectionMetadataEditOptions[],
-  ): Promise<ApplicationRoleConnectionMetadata[]>;
 }
 
 export class ClientPresence extends Presence {
@@ -1111,15 +1011,11 @@ export class ClientUser extends User {
   public mfaEnabled: boolean;
   public get presence(): ClientPresence;
   public verified: boolean;
-  public edit(options: ClientUserEditOptions): Promise<this>;
   public setActivity(options?: ActivityOptions): ClientPresence;
   public setActivity(name: string, options?: Omit<ActivityOptions, 'name'>): ClientPresence;
   public setAFK(afk?: boolean, shardId?: number | readonly number[]): ClientPresence;
-  public setAvatar(avatar: BufferResolvable | Base64Resolvable | null): Promise<this>;
-  public setBanner(banner: BufferResolvable | Base64Resolvable | null): Promise<this>;
   public setPresence(data: PresenceData): ClientPresence;
   public setStatus(status: PresenceStatusData, shardId?: number | readonly number[]): ClientPresence;
-  public setUsername(username: string): Promise<this>;
 }
 
 export class Options extends null {
@@ -1340,7 +1236,6 @@ export class DMChannel extends BaseChannel {
   public recipientId: Snowflake;
   public get recipient(): User | null;
   public type: ChannelType.DM;
-  public fetch(force?: boolean): Promise<this>;
   public toString(): UserMention;
 }
 
@@ -1375,22 +1270,12 @@ export class ApplicationEmoji extends Emoji {
   public id: Snowflake;
   public managed: boolean | null;
   public requiresColons: boolean | null;
-  public delete(): Promise<ApplicationEmoji>;
-  public edit(options: ApplicationEmojiEditOptions): Promise<ApplicationEmoji>;
   public equals(other: ApplicationEmoji | unknown): boolean;
-  public fetchAuthor(): Promise<User>;
-  public setName(name: string): Promise<ApplicationEmoji>;
 }
 
 export class ApplicationEmojiManager extends CachedManager<Snowflake, ApplicationEmoji, EmojiResolvable> {
   private constructor(application: ClientApplication, iterable?: Iterable<RawApplicationEmojiData>);
   public application: ClientApplication;
-  public create(options: ApplicationEmojiCreateOptions): Promise<ApplicationEmoji>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<ApplicationEmoji>;
-  public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, ApplicationEmoji>>;
-  public fetchAuthor(emoji: EmojiResolvable): Promise<User>;
-  public delete(emoji: EmojiResolvable): Promise<void>;
-  public edit(emoji: EmojiResolvable, options: ApplicationEmojiEditOptions): Promise<ApplicationEmoji>;
 }
 
 export class Entitlement extends Base {
@@ -1408,8 +1293,6 @@ export class Entitlement extends Base {
   public get guild(): Guild | null;
   public get startsAt(): Date | null;
   public get endsAt(): Date | null;
-  public consume(): Promise<void>;
-  public fetchUser(): Promise<User>;
   public isActive(): boolean;
   public isTest(): this is this & {
     startsTimestamp: null;
@@ -1479,58 +1362,9 @@ export class Guild extends AnonymousGuild {
   public widgetChannelId: Snowflake | null;
   public widgetEnabled: boolean | null;
   public get maximumBitrate(): number;
-  public createTemplate(name: string, description?: string): Promise<GuildTemplate>;
-  public delete(): Promise<Guild>;
   public discoverySplashURL(options?: ImageURLOptions): string | null;
-  public edit(options: GuildEditOptions): Promise<Guild>;
-  public editOnboarding(options: GuildOnboardingEditOptions): Promise<GuildOnboarding>;
-  public editWelcomeScreen(options: WelcomeScreenEditOptions): Promise<WelcomeScreen>;
   public equals(guild: Guild): boolean;
-  public fetchAuditLogs<Event extends GuildAuditLogsResolvable = null>(
-    options?: GuildAuditLogsFetchOptions<Event>,
-  ): Promise<GuildAuditLogs<Event>>;
-  public fetchIntegrations(): Promise<Collection<Snowflake | string, Integration>>;
-  public fetchOnboarding(): Promise<GuildOnboarding>;
-  public fetchOwner(options?: BaseFetchOptions): Promise<GuildMember>;
-  public fetchPreview(): Promise<GuildPreview>;
-  public fetchTemplates(): Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
-  public fetchVanityData(): Promise<Vanity>;
-  public fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  public fetchWelcomeScreen(): Promise<WelcomeScreen>;
-  public fetchWidget(): Promise<Widget>;
-  public fetchWidgetSettings(): Promise<GuildWidgetSettings>;
   public widgetImageURL(style?: GuildWidgetStyle): string;
-  public leave(): Promise<Guild>;
-  public disableInvites(disabled?: boolean): Promise<Guild>;
-  public setAFKChannel(afkChannel: VoiceChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setAFKTimeout(afkTimeout: number, reason?: string): Promise<Guild>;
-  public setBanner(banner: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setDefaultMessageNotifications(
-    defaultMessageNotifications: GuildDefaultMessageNotifications | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setDiscoverySplash(
-    discoverySplash: BufferResolvable | Base64Resolvable | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setExplicitContentFilter(
-    explicitContentFilter: GuildExplicitContentFilter | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setName(name: string, reason?: string): Promise<Guild>;
-  public setOwner(owner: GuildMemberResolvable, reason?: string): Promise<Guild>;
-  public setPreferredLocale(preferredLocale: Locale | null, reason?: string): Promise<Guild>;
-  public setPublicUpdatesChannel(publicUpdatesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setRulesChannel(rulesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSafetyAlertsChannel(safetyAlertsChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSplash(splash: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannel(systemChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannelFlags(systemChannelFlags: SystemChannelFlagsResolvable, reason?: string): Promise<Guild>;
-  public setVerificationLevel(verificationLevel: GuildVerificationLevel | null, reason?: string): Promise<Guild>;
-  public setPremiumProgressBarEnabled(enabled?: boolean, reason?: string): Promise<Guild>;
-  public setWidgetSettings(settings: GuildWidgetSettingsData, reason?: string): Promise<Guild>;
-  public setMFALevel(level: GuildMFALevel, reason?: string): Promise<Guild>;
   public toJSON(): unknown;
 }
 
@@ -1585,7 +1419,6 @@ export class GuildBan extends Base {
   public user: User;
   public get partial(): boolean;
   public reason?: string | null;
-  public fetch(force?: boolean): Promise<GuildBan>;
 }
 
 export abstract class GuildChannel extends BaseChannel {
@@ -1609,19 +1442,12 @@ export abstract class GuildChannel extends BaseChannel {
   public rawPosition: number;
   public type: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>;
   public get viewable(): boolean;
-  public clone(options?: GuildChannelCloneOptions): Promise<this>;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: GuildChannelEditOptions): Promise<this>;
   public equals(channel: GuildChannel): boolean;
-  public lockPermissions(): Promise<this>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public setName(name: string, reason?: string): Promise<this>;
-  public setParent(channel: CategoryChannelResolvable | null, options?: SetParentOptions): Promise<this>;
-  public setPosition(position: number, options?: SetChannelPositionOptions): Promise<this>;
   public isTextBased(): this is GuildBasedChannel & TextBasedChannel;
   public toString(): ChannelMention;
 }
@@ -1634,11 +1460,7 @@ export class GuildEmoji extends BaseGuildEmoji {
   public guild: Guild;
   public author: User | null;
   public get roles(): GuildEmojiRoleManager;
-  public delete(reason?: string): Promise<GuildEmoji>;
-  public edit(options: GuildEmojiEditOptions): Promise<GuildEmoji>;
   public equals(other: GuildEmoji | unknown): boolean;
-  public fetchAuthor(): Promise<User>;
-  public setName(name: string, reason?: string): Promise<GuildEmoji>;
 }
 
 export type GuildMemberFlagsString = keyof typeof GuildMemberFlags;
@@ -1681,22 +1503,12 @@ export class GuildMember extends Base {
   public user: User;
   public get voice(): VoiceState;
   public avatarURL(options?: ImageURLOptions): string | null;
-  public ban(options?: BanOptions): Promise<GuildMember>;
-  public disableCommunicationUntil(timeout: DateResolvable | null, reason?: string): Promise<GuildMember>;
-  public timeout(timeout: number | null, reason?: string): Promise<GuildMember>;
-  public fetch(force?: boolean): Promise<GuildMember>;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
-  public edit(options: GuildMemberEditOptions): Promise<GuildMember>;
   public isCommunicationDisabled(): this is GuildMember & {
     communicationDisabledUntilTimestamp: number;
     readonly communicationDisabledUntil: Date;
   };
-  public kick(reason?: string): Promise<GuildMember>;
   public permissionsIn(channel: GuildChannelResolvable): Readonly<PermissionsBitField>;
-  public setFlags(flags: GuildMemberFlagsResolvable, reason?: string): Promise<GuildMember>;
-  public setNickname(nickname: string | null, reason?: string): Promise<GuildMember>;
   public toJSON(): unknown;
   public toString(): UserMention;
   public valueOf(): string;
@@ -1757,7 +1569,6 @@ export class GuildPreview extends Base {
   public discoverySplashURL(options?: ImageURLOptions): string | null;
   public iconURL(options?: ImageURLOptions): string | null;
   public splashURL(options?: ImageURLOptions): string | null;
-  public fetch(): Promise<GuildPreview>;
   public toJSON(): unknown;
   public toString(): string;
 }
@@ -1790,26 +1601,6 @@ export class GuildScheduledEvent<Status extends GuildScheduledEventStatus = Guil
   public get partial(): false;
   public coverImageURL(options?: Readonly<BaseImageURLOptions>): string | null;
   public createInviteURL(options?: GuildScheduledEventInviteURLCreateOptions): Promise<string>;
-  public edit<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public fetch(force?: boolean): Promise<GuildScheduledEvent<Status>>;
-  public delete(): Promise<GuildScheduledEvent<Status>>;
-  public setName(name: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledStartTime(
-    scheduledStartTime: DateResolvable,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledEndTime(scheduledEndTime: DateResolvable, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setDescription(description: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setStatus<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    status: AcceptableStatus,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public setLocation(location: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
-    options?: Options,
-  ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
   public toString(): string;
   public isActive(): this is GuildScheduledEvent<GuildScheduledEventStatus.Active>;
   public isCanceled(): this is GuildScheduledEvent<GuildScheduledEventStatus.Canceled>;
@@ -1834,10 +1625,6 @@ export class GuildTemplate extends Base {
   public guildId: Snowflake;
   public serializedGuild: APITemplateSerializedSourceGuild;
   public unSynced: boolean | null;
-  public createGuild(name: string, icon?: BufferResolvable | Base64Resolvable): Promise<Guild>;
-  public delete(): Promise<GuildTemplate>;
-  public edit(options?: GuildTemplateEditOptions): Promise<GuildTemplate>;
-  public sync(): Promise<GuildTemplate>;
   public static GuildTemplatesPattern: RegExp;
 }
 
@@ -1868,7 +1655,6 @@ export class Integration extends Base {
   public user: User | null;
   public subscriberCount: number | null;
   public revoked: boolean | null;
-  public delete(reason?: string): Promise<Integration>;
 }
 
 export class IntegrationApplication extends Application {
@@ -1959,8 +1745,6 @@ export class BaseInteraction<Cached extends CacheType = CacheType> extends Base
   public isMessageContextMenuCommand(): this is MessageContextMenuCommandInteraction<Cached>;
   public isModalSubmit(): this is ModalSubmitInteraction<Cached>;
   public isUserContextMenuCommand(): this is UserContextMenuCommandInteraction<Cached>;
-  /** @deprecated Use {@link BaseInteraction.isStringSelectMenu} instead. */
-  public isSelectMenu(): this is StringSelectMenuInteraction<Cached>;
   public isAnySelectMenu(): this is AnySelectMenuInteraction<Cached>;
   public isStringSelectMenu(): this is StringSelectMenuInteraction<Cached>;
   public isUserSelectMenu(): this is UserSelectMenuInteraction<Cached>;
@@ -2046,28 +1830,12 @@ export class Invite extends Base {
   public type: InviteType;
   public get url(): string;
   public uses: number | null;
-  public delete(reason?: string): Promise<Invite>;
   public toJSON(): unknown;
   public toString(): string;
   public static InvitesPattern: RegExp;
-  /** @deprecated Public Stage Instances don't exist anymore  */
-  public stageInstance: InviteStageInstance | null;
   public guildScheduledEvent: GuildScheduledEvent | null;
 }
 
-/** @deprecated Public Stage Instances don't exist anymore */
-export class InviteStageInstance extends Base {
-  private constructor(client: Client<true>, data: RawInviteStageInstance, channelId: Snowflake, guildId: Snowflake);
-  public channelId: Snowflake;
-  public guildId: Snowflake;
-  public members: Collection<Snowflake, GuildMember>;
-  public topic: string;
-  public participantCount: number;
-  public speakerCount: number;
-  public get channel(): StageChannel | null;
-  public get guild(): Guild | null;
-}
-
 export class InviteGuild extends AnonymousGuild {
   private constructor(client: Client<true>, data: RawInviteGuildData);
   public welcomeScreen: WelcomeScreen | null;
@@ -2160,8 +1928,6 @@ export class Message<InGuild extends boolean = boolean> extends Base {
   public get guild(): If<InGuild, Guild>;
   public get hasThread(): boolean;
   public id: Snowflake;
-  /** @deprecated Use {@link Message.interactionMetadata} instead. */
-  public interaction: MessageInteraction | null;
   public interactionMetadata: MessageInteractionMetadata | null;
   public get member(): GuildMember | null;
   public mentions: MessageMentions<InGuild>;
@@ -2184,35 +1950,10 @@ export class Message<InGuild extends boolean = boolean> extends Base {
   public webhookId: Snowflake | null;
   public flags: Readonly<MessageFlagsBitField>;
   public reference: MessageReference | null;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): Promise<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public awaitReactions(options?: AwaitReactionsOptions): Promise<Collection<Snowflake | string, MessageReaction>>;
-  public createReactionCollector(options?: ReactionCollectorOptions): ReactionCollector;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): InteractionCollector<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public delete(): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public edit(
-    content: string | MessageEditOptions | MessagePayload,
-  ): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
   public equals(message: Message, rawData: unknown): boolean;
-  public fetchReference(): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public fetchWebhook(): Promise<Webhook>;
-  public crosspost(): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public fetch(force?: boolean): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public pin(reason?: string): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public react(emoji: EmojiIdentifierResolvable): Promise<MessageReaction>;
-  public removeAttachments(): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
-  public reply(
-    options: string | MessagePayload | MessageReplyOptions,
-  ): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
   public resolveComponent(customId: string): MessageActionRowComponent | null;
-  public startThread(options: StartThreadOptions): Promise<PublicThreadChannel<false>>;
-  public suppressEmbeds(suppress?: boolean): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
   public toJSON(): unknown;
   public toString(): string;
-  public unpin(reason?: string): Promise<NonPartialGroupDMChannel<Message<InGuild>>>;
   public inGuild(): this is Message<true>;
 }
 
@@ -2320,11 +2061,6 @@ export class MessageComponentInteraction<Cached extends CacheType = CacheType> e
       | ModalComponentData
       | APIModalInteractionResponseCallbackData,
   ): Promise<void>;
-  /** @deprecated Sending a premium-style button is the new Discord behaviour. */
-  public sendPremiumRequired(): Promise<void>;
-  public awaitModalSubmit(
-    options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
-  ): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export class MessageContextMenuCommandInteraction<
@@ -2441,9 +2177,6 @@ export class MessageReaction {
   public message: Message | PartialMessage;
   public get partial(): false;
   public users: ReactionUserManager;
-  public react(): Promise<MessageReaction>;
-  public remove(): Promise<MessageReaction>;
-  public fetch(): Promise<MessageReaction>;
   public toJSON(): unknown;
   public valueOf(): Snowflake | string;
 }
@@ -2527,8 +2260,6 @@ export class ModalSubmitInteraction<Cached extends CacheType = CacheType> extend
     options: InteractionDeferUpdateOptions & { fetchReply: true },
   ): Promise<Message<BooleanCache<Cached>>>;
   public deferUpdate(options?: InteractionDeferUpdateOptions): Promise<InteractionResponse<BooleanCache<Cached>>>;
-  /** @deprecated Sending a premium-style button is the new Discord behaviour. */
-  public sendPremiumRequired(): Promise<void>;
   public inGuild(): this is ModalSubmitInteraction<'raw' | 'cached'>;
   public inCachedGuild(): this is ModalSubmitInteraction<'cached'>;
   public inRawGuild(): this is ModalSubmitInteraction<'raw'>;
@@ -2538,7 +2269,6 @@ export class ModalSubmitInteraction<Cached extends CacheType = CacheType> extend
 export class NewsChannel extends BaseGuildTextChannel {
   public threads: GuildTextThreadManager<AllowedThreadTypeForNewsChannel>;
   public type: ChannelType.GuildAnnouncement;
-  public addFollower(channel: TextChannelResolvable, reason?: string): Promise<NewsChannel>;
 }
 
 export type NewsChannelResolvable = NewsChannel | Snowflake;
@@ -2606,23 +2336,11 @@ export abstract class ThreadOnlyChannel extends GuildChannel {
   public nsfw: boolean;
   public topic: string | null;
   public defaultSortOrder: SortOrderType | null;
-  public setAvailableTags(tags: readonly GuildForumTagData[], reason?: string): Promise<this>;
-  public setDefaultReactionEmoji(emojiId: DefaultReactionEmoji | null, reason?: string): Promise<this>;
-  public setDefaultThreadRateLimitPerUser(rateLimit: number, reason?: string): Promise<this>;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setDefaultSortOrder(defaultSortOrder: SortOrderType | null, reason?: string): Promise<this>;
 }
 
 export class ForumChannel extends ThreadOnlyChannel {
   public type: ChannelType.GuildForum;
   public defaultForumLayout: ForumLayoutType;
-  public setDefaultForumLayout(defaultForumLayout: ForumLayoutType, reason?: string): Promise<this>;
 }
 
 export class MediaChannel extends ThreadOnlyChannel {
@@ -2636,8 +2354,6 @@ export class PermissionOverwrites extends Base {
   public deny: Readonly<PermissionsBitField>;
   public id: Snowflake;
   public type: OverwriteType;
-  public edit(options: PermissionOverwriteOptions, reason?: string): Promise<PermissionOverwrites>;
-  public delete(reason?: string): Promise<PermissionOverwrites>;
   public toJSON(): unknown;
   public static resolveOverwriteOptions(
     options: PermissionOverwriteOptions,
@@ -2688,7 +2404,6 @@ export class Poll extends Base {
   public allowMultiselect: boolean;
   public layoutType: PollLayoutType;
   public resultsFinalized: boolean;
-  public end(): Promise<Message>;
 }
 
 export interface BaseFetchPollAnswerVotersOptions {
@@ -2784,22 +2499,12 @@ export class Role extends Base {
   public comparePositionTo(role: RoleResolvable): number;
   public icon: string | null;
   public unicodeEmoji: string | null;
-  public delete(reason?: string): Promise<Role>;
-  public edit(options: RoleEditOptions): Promise<Role>;
   public equals(role: Role): boolean;
   public iconURL(options?: ImageURLOptions): string | null;
   public permissionsIn(
     channel: NonThreadGuildBasedChannel | Snowflake,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField>;
-  public setColor(color: ColorResolvable, reason?: string): Promise<Role>;
-  public setHoist(hoist?: boolean, reason?: string): Promise<Role>;
-  public setMentionable(mentionable?: boolean, reason?: string): Promise<Role>;
-  public setName(name: string, reason?: string): Promise<Role>;
-  public setPermissions(permissions: PermissionResolvable, reason?: string): Promise<Role>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | EmojiResolvable | null, reason?: string): Promise<Role>;
-  public setPosition(position: number, options?: SetRolePositionOptions): Promise<Role>;
-  public setUnicodeEmoji(unicodeEmoji: string | null, reason?: string): Promise<Role>;
   public toJSON(): unknown;
   public toString(): RoleMention;
 }
@@ -2829,11 +2534,6 @@ export class StringSelectMenuInteraction<
   public inRawGuild(): this is StringSelectMenuInteraction<'raw'>;
 }
 
-export {
-  /** @deprecated Use {@link StringSelectMenuInteraction} instead */
-  StringSelectMenuInteraction as SelectMenuInteraction,
-};
-
 export class UserSelectMenuInteraction<
   Cached extends CacheType = CacheType,
 > extends MessageComponentInteraction<Cached> {
@@ -3091,8 +2791,6 @@ export class StageChannel extends BaseGuildVoiceChannel {
   public get stageInstance(): StageInstance | null;
   public topic: string | null;
   public type: ChannelType.GuildStageVoice;
-  public createStageInstance(options: StageInstanceCreateOptions): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageChannel>;
 }
 
 export class DirectoryChannel extends BaseChannel {
@@ -3110,15 +2808,10 @@ export class StageInstance extends Base {
   public channelId: Snowflake;
   public topic: string;
   public privacyLevel: StageInstancePrivacyLevel;
-  /** @deprecated See https://github.com/discord/discord-api-docs/pull/4296 for more information */
-  public discoverableDisabled: boolean | null;
   public guildScheduledEventId?: Snowflake;
   public get channel(): StageChannel | null;
   public get guild(): Guild | null;
   public get guildScheduledEvent(): GuildScheduledEvent | null;
-  public edit(options: StageInstanceEditOptions): Promise<StageInstance>;
-  public delete(): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageInstance>;
   public get createdTimestamp(): number;
   public get createdAt(): Date;
 }
@@ -3141,11 +2834,6 @@ export class Sticker extends Base {
   public type: StickerType | null;
   public user: User | null;
   public get url(): string;
-  public fetch(): Promise<Sticker>;
-  public fetchPack(): Promise<StickerPack | null>;
-  public fetchUser(): Promise<User | null>;
-  public edit(options?: GuildStickerEditOptions): Promise<Sticker>;
-  public delete(reason?: string): Promise<Sticker>;
   public equals(other: Sticker | unknown): boolean;
 }
 
@@ -3264,8 +2952,6 @@ export class TeamMember extends Base {
   private constructor(team: Team, data: RawTeamMemberData);
   public team: Team;
   public get id(): Snowflake;
-  /** @deprecated Use {@link TeamMember.role} instead. */
-  public permissions: string[];
   public membershipState: TeamMemberMembershipState;
   public user: User;
   public role: TeamMemberRole;
@@ -3329,26 +3015,11 @@ export class ThreadChannel<ThreadOnly extends boolean = boolean> extends BaseCha
   public rateLimitPerUser: number | null;
   public type: ThreadChannelType;
   public get unarchivable(): boolean;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: ThreadEditOptions): Promise<this>;
-  public join(): Promise<this>;
-  public leave(): Promise<this>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public fetchOwner(options?: BaseFetchOptions): Promise<ThreadMember | null>;
-  public fetchStarterMessage(options?: BaseFetchOptions): Promise<Message<true> | null>;
-  public setArchived(archived?: boolean, reason?: string): Promise<this>;
-  public setAutoArchiveDuration(autoArchiveDuration: ThreadAutoArchiveDuration, reason?: string): Promise<this>;
-  public setInvitable(invitable?: boolean, reason?: string): Promise<this>;
-  public setLocked(locked?: boolean, reason?: string): Promise<this>;
-  public setName(name: string, reason?: string): Promise<this>;
-  // The following 3 methods can only be run on forum threads.
-  public setAppliedTags(appliedTags: readonly Snowflake[], reason?: string): Promise<If<ThreadOnly, this, never>>;
-  public pin(reason?: string): Promise<If<ThreadOnly, this, never>>;
-  public unpin(reason?: string): Promise<If<ThreadOnly, this, never>>;
   public toString(): ChannelMention;
 }
 
@@ -3364,7 +3035,6 @@ export class ThreadMember<HasMemberData extends boolean = boolean> extends Base
   public thread: AnyThreadChannel;
   public get user(): User | null;
   public get partial(): false;
-  public remove(reason?: string): Promise<ThreadMember>;
 }
 
 export type ThreadMemberFlagsString = keyof typeof ThreadMemberFlags;
@@ -3401,8 +3071,6 @@ export class User extends Base {
 
   public accentColor: number | null | undefined;
   public avatar: string | null;
-  /** @deprecated Use {@link User.avatarDecorationData} instead */
-  public avatarDecoration: string | null;
   public avatarDecorationData: AvatarDecorationData | null;
   public banner: string | null | undefined;
   public bot: boolean;
@@ -3423,12 +3091,8 @@ export class User extends Base {
   public avatarURL(options?: ImageURLOptions): string | null;
   public avatarDecorationURL(options?: BaseImageURLOptions): string | null;
   public bannerURL(options?: ImageURLOptions): string | null | undefined;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
   public equals(user: User): boolean;
-  public fetch(force?: boolean): Promise<User>;
-  public fetchFlags(force?: boolean): Promise<UserFlagsBitField>;
   public toString(): UserMention;
 }
 
@@ -3493,16 +3157,6 @@ export function resolvePartialEmoji(emoji: Snowflake): PartialEmojiOnlyId;
 /** @internal */
 export function resolvePartialEmoji(emoji: Emoji | EmojiIdentifierResolvable): PartialEmoji | null;
 export function verifyString(data: string, error?: typeof Error, errorMessage?: string, allowEmpty?: boolean): string;
-/** @internal */
-export function setPosition<Item extends Channel | Role>(
-  item: Item,
-  position: number,
-  relative: boolean,
-  sorted: ReadonlyCollection<Snowflake, Item>,
-  client: Client<true>,
-  route: string,
-  reason?: string,
-): Promise<{ id: Snowflake; position: number }[]>;
 export function parseWebhookURL(url: string): WebhookClientDataIdWithToken | null;
 /** @internal */
 export function transformResolved<Cached extends CacheType>(
@@ -3557,44 +3211,6 @@ export function createComponentBuilder<Type extends keyof MappedComponentBuilder
 export function createComponentBuilder<Data extends ComponentBuilder>(data: Data): Data;
 export function createComponentBuilder(data: APIMessageComponent | ComponentBuilder): ComponentBuilder;
 
-/** @deprecated This class is redundant as all methods of the class can be imported from discord.js directly. */
-export class Formatters extends null {
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static blockQuote: typeof blockQuote;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static bold: typeof bold;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static channelMention: typeof channelMention;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static codeBlock: typeof codeBlock;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static formatEmoji: typeof formatEmoji;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static hideLinkEmbed: typeof hideLinkEmbed;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static hyperlink: typeof hyperlink;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static inlineCode: typeof inlineCode;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static italic: typeof italic;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static quote: typeof quote;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static roleMention: typeof roleMention;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static spoiler: typeof spoiler;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static strikethrough: typeof strikethrough;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static time: typeof time;
-  /** @deprecated Import this property directly from discord.js instead. */
-  public static TimestampStyles: typeof TimestampStyles;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static underscore: typeof underscore;
-  /** @deprecated Import this method directly from discord.js instead. */
-  public static userMention: typeof userMention;
-}
-
 /** @internal */
 export function resolveBase64(data: Base64Resolvable): string;
 /** @internal */
@@ -3646,15 +3262,6 @@ export class VoiceState extends Base {
   public selfVideo: boolean | null;
   public suppress: boolean | null;
   public requestToSpeakTimestamp: number | null;
-
-  public setDeaf(deaf?: boolean, reason?: string): Promise<GuildMember>;
-  public setMute(mute?: boolean, reason?: string): Promise<GuildMember>;
-  public disconnect(reason?: string): Promise<GuildMember>;
-  public setChannel(channel: GuildVoiceChannelResolvable | null, reason?: string): Promise<GuildMember>;
-  public setRequestToSpeak(request?: boolean): Promise<this>;
-  public setSuppressed(suppressed?: boolean): Promise<this>;
-  public edit(options: VoiceStateEditOptions): Promise<this>;
-  public fetch(force?: boolean): Promise<VoiceState>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3684,13 +3291,6 @@ export class Webhook<Type extends WebhookType = WebhookType> {
   public isApplicationCreated(): this is Webhook<WebhookType.Application>;
   public isIncoming(): this is Webhook<WebhookType.Incoming>;
   public isChannelFollower(): this is Webhook<WebhookType.ChannelFollower>;
-
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<Message>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<Message>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<Message>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3700,12 +3300,6 @@ export class WebhookClient extends BaseClient {
   public readonly client: this;
   public options: WebhookClientOptions;
   public token: string;
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<APIMessage>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<APIMessage>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<APIMessage>;
 }
 
 export class WebSocketManager extends EventEmitter {
@@ -3775,7 +3369,6 @@ export class WebSocketShard extends EventEmitter {
 export class Widget extends Base {
   private constructor(client: Client<true>, data: RawWidgetData);
   private _patch(data: RawWidgetData): void;
-  public fetch(): Promise<Widget>;
   public imageURL(style?: GuildWidgetStyle): string;
   public id: Snowflake;
   public name: string;
@@ -3838,29 +3431,6 @@ export type UndeletableMessageType =
   | MessageType.ChannelIconChange
   | MessageType.ThreadStarterMessage;
 
-/** @deprecated This type will no longer be updated. Use {@link UndeletableMessageType} instead. */
-export type DeletableMessageType =
-  | MessageType.AutoModerationAction
-  | MessageType.ChannelFollowAdd
-  | MessageType.ChannelPinnedMessage
-  | MessageType.ChatInputCommand
-  | MessageType.ContextMenuCommand
-  | MessageType.Default
-  | MessageType.GuildBoost
-  | MessageType.GuildBoostTier1
-  | MessageType.GuildBoostTier2
-  | MessageType.GuildBoostTier3
-  | MessageType.GuildInviteReminder
-  | MessageType.InteractionPremiumUpsell
-  | MessageType.Reply
-  | MessageType.RoleSubscriptionPurchase
-  | MessageType.StageEnd
-  | MessageType.StageRaiseHand
-  | MessageType.StageSpeaker
-  | MessageType.StageStart
-  | MessageType.StageTopic
-  | MessageType.ThreadCreated
-  | MessageType.UserJoin;
 
 export const Constants: {
   MaxBulkDeletableMessageAge: 1_209_600_000;
@@ -3872,8 +3442,6 @@ export const Constants: {
   VoiceBasedChannelTypes: VoiceBasedChannelTypes[];
   SelectMenuTypes: SelectMenuType[];
   UndeletableMessageTypes: UndeletableMessageType[];
-  /** @deprecated This list will no longer be updated. Use {@link Constants.UndeletableMessageTypes} instead. */
-  DeletableMessageTypes: DeletableMessageType[];
   StickerFormatExtensionMap: Record<StickerFormatType, ImageFormat>;
 };
 
@@ -3892,24 +3460,8 @@ export enum DiscordjsErrorCodes {
   TokenMissing = 'TokenMissing',
   ApplicationCommandPermissionsTokenMissing = 'ApplicationCommandPermissionsTokenMissing',
 
-  /** @deprecated WebSocket errors are now handled in `@discordjs/ws` */
-  WSCloseRequested = 'WSCloseRequested',
-  /** @deprecated WebSocket errors are now handled in `@discordjs/ws` */
-  WSConnectionExists = 'WSConnectionExists',
-  /** @deprecated WebSocket errors are now handled in `@discordjs/ws` */
-  WSNotOpen = 'WSNotOpen',
-  /** @deprecated No longer in use */
-  ManagerDestroyed = 'ManagerDestroyed',
-
   BitFieldInvalid = 'BitFieldInvalid',
 
-  /** @deprecated This error is now handled in `@discordjs/ws` */
-  ShardingInvalid = 'ShardingInvalid',
-  /** @deprecated This error is now handled in `@discordjs/ws` */
-  ShardingRequired = 'ShardingRequired',
-  /** @deprecated This error is now handled in `@discordjs/ws` */
-  InvalidIntents = 'InvalidIntents',
-  /** @deprecated This error is now handled in `@discordjs/ws` */
   DisallowedIntents = 'DisallowedIntents',
   ShardingNoShards = 'ShardingNoShards',
   ShardingInProcess = 'ShardingInProcess',
@@ -3929,30 +3481,10 @@ export enum DiscordjsErrorCodes {
 
   InviteOptionsMissingChannel = 'InviteOptionsMissingChannel',
 
-  /** @deprecated Button validation errors are now handled in `@discordjs/builders` */
-  ButtonLabel = 'ButtonLabel',
-  /** @deprecated Button validation errors are now handled in `@discordjs/builders` */
-  ButtonURL = 'ButtonURL',
-  /** @deprecated Button validation errors are now handled in `@discordjs/builders` */
-  ButtonCustomId = 'ButtonCustomId',
-
-  /** @deprecated Select Menu validation errors are now handled in `@discordjs/builders` */
-  SelectMenuCustomId = 'SelectMenuCustomId',
-  /** @deprecated Select Menu validation errors are now handled in `@discordjs/builders` */
-  SelectMenuPlaceholder = 'SelectMenuPlaceholder',
-  /** @deprecated Select Menu validation errors are now handled in `@discordjs/builders` */
-  SelectOptionLabel = 'SelectOptionLabel',
-  /** @deprecated Select Menu validation errors are now handled in `@discordjs/builders` */
-  SelectOptionValue = 'SelectOptionValue',
-  /** @deprecated Select Menu validation errors are now handled in `@discordjs/builders` */
-  SelectOptionDescription = 'SelectOptionDescription',
-
   InteractionCollectorError = 'InteractionCollectorError',
 
   FileNotFound = 'FileNotFound',
 
-  /** @deprecated No longer in use */
-  UserBannerNotFetched = 'UserBannerNotFetched',
   UserNoDMChannel = 'UserNoDMChannel',
 
   VoiceNotStageChannel = 'VoiceNotStageChannel',
@@ -3962,19 +3494,11 @@ export enum DiscordjsErrorCodes {
 
   ReqResourceType = 'ReqResourceType',
 
-  /** @deprecated This error is now handled in `@discordjs/rest` */
-  ImageFormat = 'ImageFormat',
-  /** @deprecated This error is now handled in `@discordjs/rest` */
-  ImageSize = 'ImageSize',
-
   MessageBulkDeleteType = 'MessageBulkDeleteType',
   MessageContentType = 'MessageContentType',
   MessageNonceRequired = 'MessageNonceRequired',
   MessageNonceType = 'MessageNonceType',
 
-  /** @deprecated No longer in use */
-  SplitMaxLen = 'SplitMaxLen',
-
   BanResolveId = 'BanResolveId',
   FetchBanResolveId = 'FetchBanResolveId',
 
@@ -4008,16 +3532,11 @@ export enum DiscordjsErrorCodes {
   EmojiType = 'EmojiType',
   EmojiManaged = 'EmojiManaged',
   MissingManageGuildExpressionsPermission = 'MissingManageGuildExpressionsPermission',
-  /** @deprecated Use {@link DiscordjsErrorCodes.MissingManageGuildExpressionsPermission} instead. */
-  MissingManageEmojisAndStickersPermission = 'MissingManageEmojisAndStickersPermission',
 
   NotGuildSticker = 'NotGuildSticker',
 
   ReactionResolveUser = 'ReactionResolveUser',
 
-  /** @deprecated Not used anymore since the introduction of `GUILD_WEB_PAGE_VANITY_URL` feature */
-  VanityURL = 'VanityURL',
-
   InviteResolveCode = 'InviteResolveCode',
 
   InviteNotFound = 'InviteNotFound',
@@ -4032,8 +3551,6 @@ export enum DiscordjsErrorCodes {
 
   InteractionAlreadyReplied = 'InteractionAlreadyReplied',
   InteractionNotReplied = 'InteractionNotReplied',
-  /** @deprecated Not used anymore since ephemeral replies can now be deleted */
-  InteractionEphemeralReplied = 'InteractionEphemeralReplied',
 
   CommandInteractionOptionNotFound = 'CommandInteractionOptionNotFound',
   CommandInteractionOptionType = 'CommandInteractionOptionType',
@@ -4123,34 +3640,6 @@ export class ApplicationCommandManager<
     null
   >;
   private commandPath({ id, guildId }: { id?: Snowflake; guildId?: Snowflake }): string;
-  public create(command: ApplicationCommandDataResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope>;
-  public delete(command: ApplicationCommandResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope | null>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-  ): Promise<ApplicationCommandScope>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-    guildId: Snowflake,
-  ): Promise<ApplicationCommand>;
-  public fetch(
-    id: Snowflake,
-    options: FetchApplicationCommandOptions & { guildId: Snowflake },
-  ): Promise<ApplicationCommand>;
-  public fetch(options: FetchApplicationCommandOptions): Promise<Collection<Snowflake, ApplicationCommandScope>>;
-  public fetch(id: Snowflake, options?: FetchApplicationCommandOptions): Promise<ApplicationCommandScope>;
-  public fetch(
-    id?: Snowflake,
-    options?: FetchApplicationCommandOptions,
-  ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
-  public set(
-    commands: readonly ApplicationCommandDataResolvable[],
-  ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
-  public set(
-    commands: readonly ApplicationCommandDataResolvable[],
-    guildId: Snowflake,
-  ): Promise<Collection<Snowflake, ApplicationCommand>>;
   private static transformCommand(command: ApplicationCommandDataResolvable): RESTPostAPIApplicationCommandsJSONBody;
 }
 
@@ -4166,41 +3655,7 @@ export class ApplicationCommandPermissionsManager<
   public commandId: CommandIdType;
   public guild: GuildType;
   public guildId: Snowflake | null;
-  public add(
-    options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
-  ): Promise<ApplicationCommandPermissions[]>;
-  public has(
-    options: FetchSingleOptions & {
-      permissionId: ApplicationCommandPermissionIdResolvable;
-      permissionType?: ApplicationCommandPermissionType;
-    },
-  ): Promise<boolean>;
-  public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
-  public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
-  public remove(
-    options:
-      | (FetchSingleOptions & {
-          token: string;
-          channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles?: readonly (RoleResolvable | RolePermissionConstant)[];
-          users: readonly UserResolvable[];
-        })
-      | (FetchSingleOptions & {
-          token: string;
-          channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles: readonly (RoleResolvable | RolePermissionConstant)[];
-          users?: readonly UserResolvable[];
-        })
-      | (FetchSingleOptions & {
-          token: string;
-          channels: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles?: readonly (RoleResolvable | RolePermissionConstant)[];
-          users?: readonly UserResolvable[];
-        }),
-  ): Promise<ApplicationCommandPermissions[]>;
-  public set(
-    options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
-  ): Promise<ApplicationCommandPermissions[]>;
+
   private permissionsPath(guildId: Snowflake, commandId?: Snowflake): string;
 }
 
@@ -4211,14 +3666,6 @@ export class AutoModerationRuleManager extends CachedManager<
 > {
   private constructor(guild: Guild, iterable: unknown);
   public guild: Guild;
-  public create(options: AutoModerationRuleCreateOptions): Promise<AutoModerationRule>;
-  public edit(
-    autoModerationRule: AutoModerationRuleResolvable,
-    options: AutoModerationRuleEditOptions,
-  ): Promise<AutoModerationRule>;
-  public fetch(options: AutoModerationRuleResolvable | FetchAutoModerationRuleOptions): Promise<AutoModerationRule>;
-  public fetch(options?: FetchAutoModerationRulesOptions): Promise<Collection<Snowflake, AutoModerationRule>>;
-  public delete(autoModerationRule: AutoModerationRuleResolvable, reason?: string): Promise<void>;
 }
 
 export class BaseGuildEmojiManager extends CachedManager<Snowflake, GuildEmoji, EmojiResolvable> {
@@ -4231,15 +3678,10 @@ export class CategoryChannelChildManager extends DataManager<Snowflake, Category
 
   public channel: CategoryChannel;
   public get guild(): Guild;
-  public create<Type extends CategoryChannelType>(
-    options: CategoryCreateChannelOptions & { type: Type },
-  ): Promise<MappedChannelCategoryTypes[Type]>;
-  public create(options: CategoryCreateChannelOptions): Promise<TextChannel>;
 }
 
 export class ChannelManager extends CachedManager<Snowflake, Channel, ChannelResolvable> {
   private constructor(client: Client<true>, iterable: Iterable<RawChannelData>);
-  public fetch(id: Snowflake, options?: FetchChannelOptions): Promise<Channel | null>;
 }
 
 export type EntitlementResolvable = Snowflake | Entitlement;
@@ -4268,10 +3710,6 @@ export interface FetchEntitlementsOptions {
 
 export class EntitlementManager extends CachedManager<Snowflake, Entitlement, EntitlementResolvable> {
   private constructor(client: Client<true>, iterable: Iterable<APIEntitlement>);
-  public fetch(options?: FetchEntitlementsOptions): Promise<Collection<Snowflake, Entitlement>>;
-  public createTest(options: GuildEntitlementCreateOptions | UserEntitlementCreateOptions): Promise<Entitlement>;
-  public deleteTest(entitlement: EntitlementResolvable): Promise<void>;
-  public consume(entitlementId: Snowflake): Promise<void>;
 }
 
 export interface FetchGuildApplicationCommandFetchOptions extends Omit<FetchApplicationCommandOptions, 'guildId'> {}
@@ -4279,19 +3717,6 @@ export interface FetchGuildApplicationCommandFetchOptions extends Omit<FetchAppl
 export class GuildApplicationCommandManager extends ApplicationCommandManager<ApplicationCommand, {}, Guild> {
   private constructor(guild: Guild, iterable?: Iterable<RawApplicationCommandData>);
   public guild: Guild;
-  public create(command: ApplicationCommandDataResolvable): Promise<ApplicationCommand>;
-  public delete(command: ApplicationCommandResolvable): Promise<ApplicationCommand | null>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-  ): Promise<ApplicationCommand>;
-  public fetch(id: Snowflake, options?: FetchGuildApplicationCommandFetchOptions): Promise<ApplicationCommand>;
-  public fetch(options: FetchGuildApplicationCommandFetchOptions): Promise<Collection<Snowflake, ApplicationCommand>>;
-  public fetch(
-    id?: undefined,
-    options?: FetchGuildApplicationCommandFetchOptions,
-  ): Promise<Collection<Snowflake, ApplicationCommand>>;
-  public set(commands: readonly ApplicationCommandDataResolvable[]): Promise<Collection<Snowflake, ApplicationCommand>>;
 }
 
 export type MappedGuildChannelTypes = {
@@ -4304,66 +3729,21 @@ export class GuildChannelManager extends CachedManager<Snowflake, GuildBasedChan
   private constructor(guild: Guild, iterable?: Iterable<RawGuildChannelData>);
   public get channelCountWithoutThreads(): number;
   public guild: Guild;
-
-  public addFollower(
-    channel: NewsChannelResolvable,
-    targetChannel: TextChannelResolvable,
-    reason?: string,
-  ): Promise<Snowflake>;
-  public create<Type extends GuildChannelTypes>(
-    options: GuildChannelCreateOptions & { type: Type },
-  ): Promise<MappedGuildChannelTypes[Type]>;
-  public create(options: GuildChannelCreateOptions): Promise<TextChannel>;
-  public createWebhook(options: WebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
-  public edit(channel: GuildChannelResolvable, data: GuildChannelEditOptions): Promise<GuildChannel>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildBasedChannel | null>;
-  public fetch(
-    id?: undefined,
-    options?: BaseFetchOptions,
-  ): Promise<Collection<Snowflake, NonThreadGuildBasedChannel | null>>;
-  public fetchWebhooks(
-    channel: GuildChannelResolvable,
-  ): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  public setPosition(
-    channel: GuildChannelResolvable,
-    position: number,
-    options?: SetChannelPositionOptions,
-  ): Promise<GuildChannel>;
-  public setPositions(channelPositions: readonly ChannelPosition[]): Promise<Guild>;
-  public fetchActiveThreads(cache?: boolean): Promise<FetchedThreads>;
-  private rawFetchGuildActiveThreads(): Promise<RESTGetAPIGuildThreadsResult>;
-  public delete(channel: GuildChannelResolvable, reason?: string): Promise<void>;
 }
 
 export class GuildEmojiManager extends BaseGuildEmojiManager {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildEmojiData>);
   public guild: Guild;
-  public create(options: GuildEmojiCreateOptions): Promise<GuildEmoji>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildEmoji>;
-  public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, GuildEmoji>>;
-  public fetchAuthor(emoji: EmojiResolvable): Promise<User>;
-  public delete(emoji: EmojiResolvable, reason?: string): Promise<void>;
-  public edit(emoji: EmojiResolvable, options: GuildEmojiEditOptions): Promise<GuildEmoji>;
 }
 
 export class GuildEmojiRoleManager extends DataManager<Snowflake, Role, RoleResolvable> {
   private constructor(emoji: GuildEmoji);
   public emoji: GuildEmoji;
   public guild: Guild;
-  public add(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-  ): Promise<GuildEmoji>;
-  public set(roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>): Promise<GuildEmoji>;
-  public remove(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-  ): Promise<GuildEmoji>;
 }
 
 export class GuildManager extends CachedManager<Snowflake, Guild, GuildResolvable> {
   private constructor(client: Client<true>, iterable?: Iterable<RawGuildData>);
-  public create(options: GuildCreateOptions): Promise<Guild>;
-  public fetch(options: Snowflake | FetchGuildOptions): Promise<Guild>;
-  public fetch(options?: FetchGuildsOptions): Promise<Collection<Snowflake, OAuth2Guild>>;
   public widgetImageURL(guild: GuildResolvable, style?: GuildWidgetStyle): string;
 }
 
@@ -4377,52 +3757,16 @@ export class GuildMemberManager extends CachedManager<Snowflake, GuildMember, Gu
   private constructor(guild: Guild, iterable?: Iterable<RawGuildMemberData>);
   public guild: Guild;
   public get me(): GuildMember | null;
-  public add(
-    user: UserResolvable,
-    options: AddGuildMemberOptions & { fetchWhenExisting: false },
-  ): Promise<GuildMember | null>;
-  public add(user: UserResolvable, options: AddGuildMemberOptions): Promise<GuildMember>;
-  public ban(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
-  public bulkBan(
-    users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
-    options?: BulkBanOptions,
-  ): Promise<BulkBanResult>;
-  public edit(user: UserResolvable, options: GuildMemberEditOptions): Promise<GuildMember>;
-  public fetch(
-    options: UserResolvable | FetchMemberOptions | (FetchMembersOptions & { user: UserResolvable }),
-  ): Promise<GuildMember>;
-  public fetch(options?: FetchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public fetchMe(options?: BaseFetchOptions): Promise<GuildMember>;
-  public kick(user: UserResolvable, reason?: string): Promise<GuildMember | User | Snowflake>;
-  public list(options?: GuildListMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public prune(options: GuildPruneMembersOptions & { dry?: false; count: false }): Promise<null>;
-  public prune(options?: GuildPruneMembersOptions): Promise<number>;
-  public search(options: GuildSearchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public unban(user: UserResolvable, reason?: string): Promise<User | null>;
-  public addRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
-  public removeRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
 }
 
 export class GuildBanManager extends CachedManager<Snowflake, GuildBan, GuildBanResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildBanData>);
   public guild: Guild;
-  public create(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
-  public fetch(options: UserResolvable | FetchBanOptions): Promise<GuildBan>;
-  public fetch(options?: FetchBansOptions): Promise<Collection<Snowflake, GuildBan>>;
-  public remove(user: UserResolvable, reason?: string): Promise<User | null>;
-  public bulkCreate(
-    users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
-    options?: BulkBanOptions,
-  ): Promise<BulkBanResult>;
 }
 
 export class GuildInviteManager extends DataManager<string, Invite, InviteResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawInviteData>);
   public guild: Guild;
-  public create(channel: GuildInvitableChannelResolvable, options?: InviteCreateOptions): Promise<Invite>;
-  public fetch(options: InviteResolvable | FetchInviteOptions): Promise<Invite>;
-  public fetch(options?: FetchInvitesOptions): Promise<Collection<string, Invite>>;
-  public delete(invite: InviteResolvable, reason?: string): Promise<Invite>;
 }
 
 export class GuildScheduledEventManager extends CachedManager<
@@ -4432,34 +3776,11 @@ export class GuildScheduledEventManager extends CachedManager<
 > {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildScheduledEventData>);
   public guild: Guild;
-  public create(options: GuildScheduledEventCreateOptions): Promise<GuildScheduledEvent>;
-  public fetch(): Promise<Collection<Snowflake, GuildScheduledEvent>>;
-  public fetch<
-    Options extends GuildScheduledEventResolvable | FetchGuildScheduledEventOptions | FetchGuildScheduledEventsOptions,
-  >(options?: Options): Promise<GuildScheduledEventManagerFetchResult<Options>>;
-  public edit<
-    Status extends GuildScheduledEventStatus,
-    AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>,
-  >(
-    guildScheduledEvent: GuildScheduledEventResolvable,
-    options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public delete(guildScheduledEvent: GuildScheduledEventResolvable): Promise<void>;
-  public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
-    guildScheduledEvent: GuildScheduledEventResolvable,
-    options?: Options,
-  ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
 }
 
 export class GuildStickerManager extends CachedManager<Snowflake, Sticker, StickerResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawStickerData>);
   public guild: Guild;
-  public create(options: GuildStickerCreateOptions): Promise<Sticker>;
-  public edit(sticker: StickerResolvable, data?: GuildStickerEditOptions): Promise<Sticker>;
-  public delete(sticker: StickerResolvable, reason?: string): Promise<void>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Sticker>;
-  public fetch(id?: Snowflake, options?: BaseFetchOptions): Promise<Collection<Snowflake, Sticker>>;
-  public fetchUser(sticker: StickerResolvable): Promise<User | null>;
 }
 
 export class GuildMemberRoleManager extends DataManager<Snowflake, Role, RoleResolvable> {
@@ -4472,19 +3793,6 @@ export class GuildMemberRoleManager extends DataManager<Snowflake, Role, RoleRes
   public get botRole(): Role | null;
   public member: GuildMember;
   public guild: Guild;
-
-  public add(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
-  public set(
-    roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
-  public remove(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
 }
 
 export interface FetchPollAnswerVotersOptions extends BaseFetchPollAnswerVotersOptions {
@@ -4499,19 +3807,6 @@ export abstract class MessageManager<InGuild extends boolean = boolean> extends
 > {
   protected constructor(channel: TextBasedChannel, iterable?: Iterable<RawMessageData>);
   public channel: TextBasedChannel;
-  public delete(message: MessageResolvable): Promise<void>;
-  public edit(
-    message: MessageResolvable,
-    options: string | MessagePayload | MessageEditOptions,
-  ): Promise<Message<InGuild>>;
-  public fetch(options: MessageResolvable | FetchMessageOptions): Promise<Message<InGuild>>;
-  public fetch(options?: FetchMessagesOptions): Promise<Collection<Snowflake, Message<InGuild>>>;
-  public fetchPinned(cache?: boolean): Promise<Collection<Snowflake, Message<InGuild>>>;
-  public react(message: MessageResolvable, emoji: EmojiIdentifierResolvable): Promise<void>;
-  public pin(message: MessageResolvable, reason?: string): Promise<void>;
-  public unpin(message: MessageResolvable, reason?: string): Promise<void>;
-  public endPoll(messageId: Snowflake): Promise<Message>;
-  public fetchPollAnswerVoters(options: FetchPollAnswerVotersOptions): Promise<Collection<Snowflake, User>>;
 }
 
 export class DMMessageManager extends MessageManager {
@@ -4524,7 +3819,6 @@ export class PartialGroupDMMessageManager extends MessageManager {
 
 export class GuildMessageManager extends MessageManager<true> {
   public channel: GuildTextBasedChannel;
-  public crosspost(message: MessageResolvable): Promise<Message<true>>;
 }
 
 export class PermissionOverwriteManager extends CachedManager<
@@ -4533,27 +3827,6 @@ export class PermissionOverwriteManager extends CachedManager<
   PermissionOverwriteResolvable
 > {
   private constructor(client: Client<true>, iterable?: Iterable<RawPermissionOverwriteData>);
-  public set(
-    overwrites: readonly OverwriteResolvable[] | ReadonlyCollection<Snowflake, OverwriteResolvable>,
-    reason?: string,
-  ): Promise<NonThreadGuildBasedChannel>;
-  private upsert(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-    existing?: PermissionOverwrites,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public create(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public edit(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public delete(userOrRole: RoleResolvable | UserResolvable, reason?: string): Promise<NonThreadGuildBasedChannel>;
 }
 
 export class PresenceManager extends CachedManager<Snowflake, Presence, PresenceResolvable> {
@@ -4563,14 +3836,11 @@ export class PresenceManager extends CachedManager<Snowflake, Presence, Presence
 export class ReactionManager extends CachedManager<Snowflake | string, MessageReaction, MessageReactionResolvable> {
   private constructor(message: Message, iterable?: Iterable<RawMessageReactionData>);
   public message: Message;
-  public removeAll(): Promise<Message>;
 }
 
 export class ReactionUserManager extends CachedManager<Snowflake, User, UserResolvable> {
   private constructor(reaction: MessageReaction, iterable?: Iterable<RawUserData>);
   public reaction: MessageReaction;
-  public fetch(options?: FetchReactionUsersOptions): Promise<Collection<Snowflake, User>>;
-  public remove(user?: UserResolvable): Promise<MessageReaction>;
 }
 
 export class RoleManager extends CachedManager<Snowflake, Role, RoleResolvable> {
@@ -4580,23 +3850,12 @@ export class RoleManager extends CachedManager<Snowflake, Role, RoleResolvable>
   public guild: Guild;
   public get premiumSubscriberRole(): Role | null;
   public botRoleFor(user: UserResolvable): Role | null;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Role | null>;
-  public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, Role>>;
-  public create(options?: RoleCreateOptions): Promise<Role>;
-  public edit(role: RoleResolvable, options: RoleEditOptions): Promise<Role>;
-  public delete(role: RoleResolvable, reason?: string): Promise<void>;
-  public setPosition(role: RoleResolvable, position: number, options?: SetRolePositionOptions): Promise<Role>;
-  public setPositions(rolePositions: readonly RolePosition[]): Promise<Guild>;
   public comparePositions(role1: RoleResolvable, role2: RoleResolvable): number;
 }
 
 export class StageInstanceManager extends CachedManager<Snowflake, StageInstance, StageInstanceResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawStageInstanceData>);
   public guild: Guild;
-  public create(channel: StageChannelResolvable, options: StageInstanceCreateOptions): Promise<StageInstance>;
-  public fetch(channel: StageChannelResolvable, options?: BaseFetchOptions): Promise<StageInstance>;
-  public edit(channel: StageChannelResolvable, options: StageInstanceEditOptions): Promise<StageInstance>;
-  public delete(channel: StageChannelResolvable): Promise<void>;
 }
 
 export class ThreadManager<ThreadOnly extends boolean = boolean> extends CachedManager<
@@ -4609,64 +3868,26 @@ export class ThreadManager<ThreadOnly extends boolean = boolean> extends CachedM
     iterable?: Iterable<RawThreadChannelData>,
   );
   public channel: If<ThreadOnly, ForumChannel | MediaChannel, TextChannel | NewsChannel>;
-  public fetch(
-    options: ThreadChannelResolvable,
-    cacheOptions?: BaseFetchOptions,
-  ): Promise<If<ThreadOnly, ForumThreadChannel, TextThreadChannel> | null>;
-  public fetch(
-    options: FetchThreadsOptions & { archived: FetchArchivedThreadOptions },
-    cacheOptions?: { cache?: boolean },
-  ): Promise<FetchedThreadsMore>;
-  public fetch(options?: FetchThreadsOptions, cacheOptions?: { cache?: boolean }): Promise<FetchedThreads>;
-  public fetchArchived(options?: FetchArchivedThreadOptions, cache?: boolean): Promise<FetchedThreadsMore>;
-  public fetchActive(cache?: boolean): Promise<FetchedThreads>;
 }
 
-export class GuildTextThreadManager<AllowedThreadType> extends ThreadManager<false> {
-  public create(
-    options: GuildTextThreadCreateOptions<AllowedThreadType>,
-  ): Promise<AllowedThreadType extends ChannelType.PrivateThread ? PrivateThreadChannel : PublicThreadChannel<false>>;
-}
+export class GuildTextThreadManager<AllowedThreadType> extends ThreadManager<false> {}
 
-export class GuildForumThreadManager extends ThreadManager<true> {
-  public create(options: GuildForumThreadCreateOptions): Promise<ForumThreadChannel>;
-}
+export class GuildForumThreadManager extends ThreadManager<true> {}
 
 export class ThreadMemberManager extends CachedManager<Snowflake, ThreadMember, ThreadMemberResolvable> {
   private constructor(thread: ThreadChannel, iterable?: Iterable<RawThreadMemberData>);
   public thread: AnyThreadChannel;
   public get me(): ThreadMember | null;
-  public add(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
-
-  public fetch(
-    options: ThreadMember<true> | ((FetchThreadMemberOptions & { withMember: true }) | { member: ThreadMember<true> }),
-  ): Promise<ThreadMember<true>>;
-
-  public fetch(options: ThreadMemberResolvable | FetchThreadMemberOptions): Promise<ThreadMember>;
-
-  public fetch(
-    options: FetchThreadMembersWithGuildMemberDataOptions,
-  ): Promise<Collection<Snowflake, ThreadMember<true>>>;
-
-  public fetch(options?: FetchThreadMembersWithoutGuildMemberDataOptions): Promise<Collection<Snowflake, ThreadMember>>;
-  public fetchMe(options?: BaseFetchOptions): Promise<ThreadMember>;
-  public remove(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
 }
 
 export class UserManager extends CachedManager<Snowflake, User, UserResolvable> {
   private constructor(client: Client<true>, iterable?: Iterable<RawUserData>);
   private dmChannel(userId: Snowflake): DMChannel | null;
-  public createDM(user: UserResolvable, options?: BaseFetchOptions): Promise<DMChannel>;
-  public deleteDM(user: UserResolvable): Promise<DMChannel>;
-  public fetch(user: UserResolvable, options?: BaseFetchOptions): Promise<User>;
-  public fetchFlags(user: UserResolvable, options?: BaseFetchOptions): Promise<UserFlagsBitField>;
-  public send(user: UserResolvable, options: string | MessagePayload | MessageCreateOptions): Promise<Message>;
 }
 
 export class VoiceStateManager extends CachedManager<Snowflake, VoiceState, typeof VoiceState> {
   private constructor(guild: Guild, iterable?: Iterable<RawVoiceStateData>);
   public guild: Guild;
-  public fetch(member: GuildMemberResolvable | '@me', options?: BaseFetchOptions): Promise<VoiceState>;
 }
 
 //#endregion
@@ -4679,9 +3900,7 @@ export class VoiceStateManager extends CachedManager<Snowflake, VoiceState, type
 
 export type Constructable<Entity> = abstract new (...args: any[]) => Entity;
 
-export interface PartialTextBasedChannelFields<InGuild extends boolean = boolean> {
-  send(options: string | MessagePayload | MessageCreateOptions): Promise<Message<InGuild>>;
-}
+export interface PartialTextBasedChannelFields<InGuild extends boolean = boolean> {}
 
 export interface TextBasedChannelFields<InGuild extends boolean = boolean>
   extends PartialTextBasedChannelFields<InGuild> {
@@ -4690,47 +3909,18 @@ export interface TextBasedChannelFields<InGuild extends boolean = boolean>
   lastPinTimestamp: number | null;
   get lastPinAt(): Date | null;
   messages: If<InGuild, GuildMessageManager, DMMessageManager>;
-  awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, true>,
-  ): Promise<MappedInteractionTypes[ComponentType]>;
-  awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<Snowflake, Message>>;
-  bulkDelete(
-    messages: Collection<Snowflake, Message> | readonly MessageResolvable[] | number,
-    filterOld?: boolean,
-  ): Promise<Collection<Snowflake, Message | PartialMessage | undefined>>;
-  createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageChannelCollectorOptionsParams<ComponentType, true>,
-  ): InteractionCollector<MappedInteractionTypes[ComponentType]>;
-  createMessageCollector(options?: MessageCollectorOptions): MessageCollector;
-  createWebhook(options: ChannelWebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
-  fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  sendTyping(): Promise<void>;
-  setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this>;
-  setNSFW(nsfw?: boolean, reason?: string): Promise<this>;
 }
 
 /** @internal */
 export interface PartialWebhookFields {
   id: Snowflake;
   get url(): string;
-  deleteMessage(message: MessageResolvable | APIMessage | '@original', threadId?: Snowflake): Promise<void>;
-  editMessage(
-    message: MessageResolvable | '@original',
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<APIMessage | Message>;
-  fetchMessage(message: Snowflake | '@original', options?: WebhookFetchMessageOptions): Promise<APIMessage | Message>;
-  send(
-    options: string | MessagePayload | InteractionReplyOptions | WebhookMessageCreateOptions,
-  ): Promise<APIMessage | Message>;
 }
 
 /** @internal */
 export interface WebhookFields extends PartialWebhookFields {
   get createdAt(): Date;
   get createdTimestamp(): number;
-  delete(reason?: string): Promise<void>;
-  edit(options: WebhookEditOptions): Promise<this>;
-  sendSlackMessage(body: unknown): Promise<boolean>;
 }
 
 //#endregion
@@ -5116,8 +4306,6 @@ export interface AwaitReactionsOptions extends ReactionCollectorOptions {
 }
 
 export interface BanOptions {
-  /** @deprecated Use {@link BanOptions.deleteMessageSeconds} instead. */
-  deleteMessageDays?: number;
   deleteMessageSeconds?: number;
   reason?: string;
 }
@@ -5421,11 +4609,7 @@ export interface ClientUserEditOptions {
 }
 
 export interface CloseEvent {
-  /** @deprecated Not used anymore since using {@link @discordjs/ws#(WebSocketManager:class)} internally */
-  wasClean: boolean;
   code: number;
-  /** @deprecated Not used anymore since using {@link @discordjs/ws#(WebSocketManager:class)} internally */
-  reason: string;
 }
 
 export type CollectorFilter<Arguments extends unknown[]> = (...args: Arguments) => Awaitable<boolean>;

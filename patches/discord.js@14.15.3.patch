diff --git a/typings/index.d.ts b/typings/index.d.ts
index a4a8896d0c15eb5447495ace36a85ba92b4ba708..d8cd3190a907a292cc406e900f6a796807242405 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -1,3 +1,5 @@
+import Util from '@ayako/bot/src/BaseClient/Bot/Util.js';
+import * as Sharding from 'discord-hybrid-sharding';
 import {
   ActionRowBuilder as BuilderActionRow,
   MessageActionRowComponentBuilder,
@@ -395,32 +397,32 @@ export class AutoModerationRule extends Base {
   public enabled: boolean;
   public exemptRoles: Collection<Snowflake, Role>;
   public exemptChannels: Collection<Snowflake, GuildBasedChannel>;
-  public edit(options: AutoModerationRuleEditOptions): Promise<AutoModerationRule>;
-  public delete(reason?: string): Promise<void>;
-  public setName(name: string, reason?: string): Promise<AutoModerationRule>;
-  public setEventType(eventType: AutoModerationRuleEventType, reason?: string): Promise<AutoModerationRule>;
-  public setKeywordFilter(keywordFilter: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setRegexPatterns(regexPatterns: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setPresets(
-    presets: readonly AutoModerationRuleKeywordPresetType[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setAllowList(allowList: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setMentionTotalLimit(mentionTotalLimit: number, reason?: string): Promise<AutoModerationRule>;
-  public setMentionRaidProtectionEnabled(
-    mentionRaidProtectionEnabled: boolean,
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setActions(actions: readonly AutoModerationActionOptions[], reason?: string): Promise<AutoModerationRule>;
-  public setEnabled(enabled?: boolean, reason?: string): Promise<AutoModerationRule>;
-  public setExemptRoles(
-    roles: ReadonlyCollection<Snowflake, Role> | readonly RoleResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setExemptChannels(
-    channels: ReadonlyCollection<Snowflake, GuildBasedChannel> | readonly GuildChannelResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
+  // public edit(options: AutoModerationRuleEditOptions): Promise<AutoModerationRule>;
+  // public delete(reason?: string): Promise<void>;
+  // public setName(name: string, reason?: string): Promise<AutoModerationRule>;
+  // public setEventType(eventType: AutoModerationRuleEventType, reason?: string): Promise<AutoModerationRule>;
+  // public setKeywordFilter(keywordFilter: readonly string[], reason?: string): Promise<AutoModerationRule>;
+  // public setRegexPatterns(regexPatterns: readonly string[], reason?: string): Promise<AutoModerationRule>;
+  // public setPresets(
+  //   presets: readonly AutoModerationRuleKeywordPresetType[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setAllowList(allowList: readonly string[], reason?: string): Promise<AutoModerationRule>;
+  // public setMentionTotalLimit(mentionTotalLimit: number, reason?: string): Promise<AutoModerationRule>;
+  // public setMentionRaidProtectionEnabled(
+  //   mentionRaidProtectionEnabled: boolean,
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setActions(actions: readonly AutoModerationActionOptions[], reason?: string): Promise<AutoModerationRule>;
+  // public setEnabled(enabled?: boolean, reason?: string): Promise<AutoModerationRule>;
+  // public setExemptRoles(
+  //   roles: ReadonlyCollection<Snowflake, Role> | readonly RoleResolvable[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setExemptChannels(
+  //   channels: ReadonlyCollection<Snowflake, GuildBasedChannel> | readonly GuildChannelResolvable[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
 }
 
 export abstract class Application extends Base {
@@ -604,9 +606,9 @@ export abstract class CommandInteraction<Cached extends CacheType = CacheType> e
       | APIModalInteractionResponseCallbackData,
   ): Promise<void>;
   public sendPremiumRequired(): Promise<void>;
-  public awaitModalSubmit(
-    options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
-  ): Promise<ModalSubmitInteraction<Cached>>;
+  // public awaitModalSubmit(
+  //   options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
+  // ): Promise<ModalSubmitInteraction<Cached>>;
   private transformOption(
     option: APIApplicationCommandOption,
     resolved: APIApplicationCommandInteractionData['resolved'],
@@ -620,12 +622,12 @@ export class InteractionResponse<Cached extends boolean = boolean> {
   public id: Snowflake;
   public get createdAt(): Date;
   public get createdTimestamp(): number;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, Cached>,
-  ): Promise<MappedInteractionTypes<Cached>[ComponentType]>;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, Cached>,
-  ): InteractionCollector<MappedInteractionTypes<Cached>[ComponentType]>;
+  // public awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, Cached>,
+  // ): Promise<MappedInteractionTypes<Cached>[ComponentType]>;
+  // public createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageCollectorOptionsParams<ComponentType, Cached>,
+  // ): InteractionCollector<MappedInteractionTypes<Cached>[ComponentType]>;
   public delete(): Promise<void>;
   public edit(options: string | MessagePayload | WebhookMessageEditOptions): Promise<Message>;
   public fetch(): Promise<Message>;
@@ -670,15 +672,15 @@ export class BaseGuildTextChannel extends GuildChannel {
   public nsfw: boolean;
   public threads: GuildTextThreadManager<AllowedThreadTypeForTextChannel | AllowedThreadTypeForNewsChannel>;
   public topic: string | null;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setType(type: ChannelType.GuildText, reason?: string): Promise<TextChannel>;
-  public setType(type: ChannelType.GuildAnnouncement, reason?: string): Promise<NewsChannel>;
+  // public createInvite(options?: InviteCreateOptions): Promise<Invite>;
+  // public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
+  // public setDefaultAutoArchiveDuration(
+  //   defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<this>;
+  // public setTopic(topic: string | null, reason?: string): Promise<this>;
+  // public setType(type: ChannelType.GuildText, reason?: string): Promise<TextChannel>;
+  // public setType(type: ChannelType.GuildAnnouncement, reason?: string): Promise<NewsChannel>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -694,12 +696,12 @@ export class BaseGuildVoiceChannel extends GuildChannel {
   public rtcRegion: string | null;
   public userLimit: number;
   public videoQualityMode: VideoQualityMode | null;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setBitrate(bitrate: number, reason?: string): Promise<this>;
-  public setRTCRegion(rtcRegion: string | null, reason?: string): Promise<this>;
-  public setUserLimit(userLimit: number, reason?: string): Promise<this>;
-  public setVideoQualityMode(videoQualityMode: VideoQualityMode, reason?: string): Promise<this>;
+  // public createInvite(options?: InviteCreateOptions): Promise<Invite>;
+  // public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
+  // public setBitrate(bitrate: number, reason?: string): Promise<this>;
+  // public setRTCRegion(rtcRegion: string | null, reason?: string): Promise<this>;
+  // public setUserLimit(userLimit: number, reason?: string): Promise<this>;
+  // public setVideoQualityMode(videoQualityMode: VideoQualityMode, reason?: string): Promise<this>;
 }
 
 export type EnumLike<Enum, Value> = Record<keyof Enum, Value>;
@@ -970,8 +972,8 @@ export abstract class BaseChannel extends Base {
   public get partial(): false;
   public type: ChannelType;
   public get url(): string;
-  public delete(): Promise<this>;
-  public fetch(force?: boolean): Promise<this>;
+  // public delete(): Promise<this>;
+  // public fetch(force?: boolean): Promise<this>;
   public isThread(): this is AnyThreadChannel;
   public isTextBased(): this is TextBasedChannel;
   public isDMBased(): this is PartialGroupDMChannel | DMChannel | PartialDMChannel;
@@ -996,6 +998,8 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   // This a technique used to brand the ready state. Or else we'll get `never` errors on typeguard checks.
   private readonly _ready: Ready;
 
+  public util: typeof Util;
+  public cluster?: Sharding.ClusterClient<typeof this>;
   public application: If<Ready, ClientApplication>;
   public channels: ChannelManager;
   public get emojis(): BaseGuildEmojiManager;
@@ -1004,7 +1008,7 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   public get readyAt(): If<Ready, Date>;
   public readyTimestamp: If<Ready, number>;
   public sweepers: Sweepers;
-  public shard: ShardClientUtil | null;
+  // public shard: ShardClientUtil | null;
   public token: If<Ready, string, string | null>;
   public get uptime(): If<Ready, number>;
   public user: If<Ready, ClientUser>;
@@ -1426,58 +1430,58 @@ export class Guild extends AnonymousGuild {
   public widgetChannelId: Snowflake | null;
   public widgetEnabled: boolean | null;
   public get maximumBitrate(): number;
-  public createTemplate(name: string, description?: string): Promise<GuildTemplate>;
-  public delete(): Promise<Guild>;
-  public discoverySplashURL(options?: ImageURLOptions): string | null;
-  public edit(options: GuildEditOptions): Promise<Guild>;
-  public editOnboarding(options: GuildOnboardingEditOptions): Promise<GuildOnboarding>;
-  public editWelcomeScreen(options: WelcomeScreenEditOptions): Promise<WelcomeScreen>;
-  public equals(guild: Guild): boolean;
-  public fetchAuditLogs<Event extends GuildAuditLogsResolvable = null>(
-    options?: GuildAuditLogsFetchOptions<Event>,
-  ): Promise<GuildAuditLogs<Event>>;
-  public fetchIntegrations(): Promise<Collection<Snowflake | string, Integration>>;
-  public fetchOnboarding(): Promise<GuildOnboarding>;
-  public fetchOwner(options?: BaseFetchOptions): Promise<GuildMember>;
-  public fetchPreview(): Promise<GuildPreview>;
-  public fetchTemplates(): Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
-  public fetchVanityData(): Promise<Vanity>;
-  public fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  public fetchWelcomeScreen(): Promise<WelcomeScreen>;
-  public fetchWidget(): Promise<Widget>;
-  public fetchWidgetSettings(): Promise<GuildWidgetSettings>;
+  // public createTemplate(name: string, description?: string): Promise<GuildTemplate>;
+  // public delete(): Promise<Guild>;
+  // public discoverySplashURL(options?: ImageURLOptions): string | null;
+  // public edit(options: GuildEditOptions): Promise<Guild>;
+  // public editOnboarding(options: GuildOnboardingEditOptions): Promise<GuildOnboarding>;
+  // public editWelcomeScreen(options: WelcomeScreenEditOptions): Promise<WelcomeScreen>;
+  // public equals(guild: Guild): boolean;
+  // public fetchAuditLogs<Event extends GuildAuditLogsResolvable = null>(
+  //   options?: GuildAuditLogsFetchOptions<Event>,
+  // ): Promise<GuildAuditLogs<Event>>;
+  // public fetchIntegrations(): Promise<Collection<Snowflake | string, Integration>>;
+  // public fetchOnboarding(): Promise<GuildOnboarding>;
+  // public fetchOwner(options?: BaseFetchOptions): Promise<GuildMember>;
+  // public fetchPreview(): Promise<GuildPreview>;
+  // public fetchTemplates(): Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
+  // public fetchVanityData(): Promise<Vanity>;
+  // public fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
+  // public fetchWelcomeScreen(): Promise<WelcomeScreen>;
+  // public fetchWidget(): Promise<Widget>;
+  // public fetchWidgetSettings(): Promise<GuildWidgetSettings>;
   public widgetImageURL(style?: GuildWidgetStyle): string;
-  public leave(): Promise<Guild>;
-  public disableInvites(disabled?: boolean): Promise<Guild>;
-  public setAFKChannel(afkChannel: VoiceChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setAFKTimeout(afkTimeout: number, reason?: string): Promise<Guild>;
-  public setBanner(banner: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setDefaultMessageNotifications(
-    defaultMessageNotifications: GuildDefaultMessageNotifications | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setDiscoverySplash(
-    discoverySplash: BufferResolvable | Base64Resolvable | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setExplicitContentFilter(
-    explicitContentFilter: GuildExplicitContentFilter | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setName(name: string, reason?: string): Promise<Guild>;
-  public setOwner(owner: GuildMemberResolvable, reason?: string): Promise<Guild>;
-  public setPreferredLocale(preferredLocale: Locale | null, reason?: string): Promise<Guild>;
-  public setPublicUpdatesChannel(publicUpdatesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setRulesChannel(rulesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSafetyAlertsChannel(safetyAlertsChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSplash(splash: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannel(systemChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannelFlags(systemChannelFlags: SystemChannelFlagsResolvable, reason?: string): Promise<Guild>;
-  public setVerificationLevel(verificationLevel: GuildVerificationLevel | null, reason?: string): Promise<Guild>;
-  public setPremiumProgressBarEnabled(enabled?: boolean, reason?: string): Promise<Guild>;
-  public setWidgetSettings(settings: GuildWidgetSettingsData, reason?: string): Promise<Guild>;
-  public setMFALevel(level: GuildMFALevel, reason?: string): Promise<Guild>;
+  // public leave(): Promise<Guild>;
+  // public disableInvites(disabled?: boolean): Promise<Guild>;
+  // public setAFKChannel(afkChannel: VoiceChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setAFKTimeout(afkTimeout: number, reason?: string): Promise<Guild>;
+  // public setBanner(banner: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setDefaultMessageNotifications(
+  //   defaultMessageNotifications: GuildDefaultMessageNotifications | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setDiscoverySplash(
+  //   discoverySplash: BufferResolvable | Base64Resolvable | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setExplicitContentFilter(
+  //   explicitContentFilter: GuildExplicitContentFilter | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setIcon(icon: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setName(name: string, reason?: string): Promise<Guild>;
+  // public setOwner(owner: GuildMemberResolvable, reason?: string): Promise<Guild>;
+  // public setPreferredLocale(preferredLocale: Locale | null, reason?: string): Promise<Guild>;
+  // public setPublicUpdatesChannel(publicUpdatesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setRulesChannel(rulesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSafetyAlertsChannel(safetyAlertsChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSplash(splash: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setSystemChannel(systemChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSystemChannelFlags(systemChannelFlags: SystemChannelFlagsResolvable, reason?: string): Promise<Guild>;
+  // public setVerificationLevel(verificationLevel: GuildVerificationLevel | null, reason?: string): Promise<Guild>;
+  // public setPremiumProgressBarEnabled(enabled?: boolean, reason?: string): Promise<Guild>;
+  // public setWidgetSettings(settings: GuildWidgetSettingsData, reason?: string): Promise<Guild>;
+  // public setMFALevel(level: GuildMFALevel, reason?: string): Promise<Guild>;
   public toJSON(): unknown;
 }
 
@@ -1532,7 +1536,7 @@ export class GuildBan extends Base {
   public user: User;
   public get partial(): boolean;
   public reason?: string | null;
-  public fetch(force?: boolean): Promise<GuildBan>;
+  // public fetch(force?: boolean): Promise<GuildBan>;
 }
 
 export abstract class GuildChannel extends BaseChannel {
@@ -1556,19 +1560,19 @@ export abstract class GuildChannel extends BaseChannel {
   public rawPosition: number;
   public type: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>;
   public get viewable(): boolean;
-  public clone(options?: GuildChannelCloneOptions): Promise<this>;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: GuildChannelEditOptions): Promise<this>;
+  // public clone(options?: GuildChannelCloneOptions): Promise<this>;
+  // public delete(reason?: string): Promise<this>;
+  // public edit(options: GuildChannelEditOptions): Promise<this>;
   public equals(channel: GuildChannel): boolean;
-  public lockPermissions(): Promise<this>;
+  // public lockPermissions(): Promise<this>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public setName(name: string, reason?: string): Promise<this>;
-  public setParent(channel: CategoryChannelResolvable | null, options?: SetParentOptions): Promise<this>;
-  public setPosition(position: number, options?: SetChannelPositionOptions): Promise<this>;
+  // public setName(name: string, reason?: string): Promise<this>;
+  // public setParent(channel: CategoryChannelResolvable | null, options?: SetParentOptions): Promise<this>;
+  // public setPosition(position: number, options?: SetChannelPositionOptions): Promise<this>;
   public isTextBased(): this is GuildBasedChannel & TextBasedChannel;
   public toString(): ChannelMention;
 }
@@ -1581,11 +1585,11 @@ export class GuildEmoji extends BaseGuildEmoji {
   public guild: Guild;
   public author: User | null;
   public get roles(): GuildEmojiRoleManager;
-  public delete(reason?: string): Promise<GuildEmoji>;
-  public edit(options: GuildEmojiEditOptions): Promise<GuildEmoji>;
+  // public delete(reason?: string): Promise<GuildEmoji>;
+  // public edit(options: GuildEmojiEditOptions): Promise<GuildEmoji>;
   public equals(other: GuildEmoji | unknown): boolean;
-  public fetchAuthor(): Promise<User>;
-  public setName(name: string, reason?: string): Promise<GuildEmoji>;
+  // public fetchAuthor(): Promise<User>;
+  // public setName(name: string, reason?: string): Promise<GuildEmoji>;
 }
 
 export type GuildMemberFlagsString = keyof typeof GuildMemberFlags;
@@ -1628,22 +1632,22 @@ export class GuildMember extends Base {
   public user: User;
   public get voice(): VoiceState;
   public avatarURL(options?: ImageURLOptions): string | null;
-  public ban(options?: BanOptions): Promise<GuildMember>;
-  public disableCommunicationUntil(timeout: DateResolvable | null, reason?: string): Promise<GuildMember>;
-  public timeout(timeout: number | null, reason?: string): Promise<GuildMember>;
-  public fetch(force?: boolean): Promise<GuildMember>;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
+  // public ban(options?: BanOptions): Promise<GuildMember>;
+  // public disableCommunicationUntil(timeout: DateResolvable | null, reason?: string): Promise<GuildMember>;
+  // public timeout(timeout: number | null, reason?: string): Promise<GuildMember>;
+  // public fetch(force?: boolean): Promise<GuildMember>;
+  // public createDM(force?: boolean): Promise<DMChannel>;
+  // public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
-  public edit(options: GuildMemberEditOptions): Promise<GuildMember>;
+  // public edit(options: GuildMemberEditOptions): Promise<GuildMember>;
   public isCommunicationDisabled(): this is GuildMember & {
     communicationDisabledUntilTimestamp: number;
     readonly communicationDisabledUntil: Date;
   };
-  public kick(reason?: string): Promise<GuildMember>;
+  // public kick(reason?: string): Promise<GuildMember>;
   public permissionsIn(channel: GuildChannelResolvable): Readonly<PermissionsBitField>;
-  public setFlags(flags: GuildMemberFlagsResolvable, reason?: string): Promise<GuildMember>;
-  public setNickname(nickname: string | null, reason?: string): Promise<GuildMember>;
+  // public setFlags(flags: GuildMemberFlagsResolvable, reason?: string): Promise<GuildMember>;
+  // public setNickname(nickname: string | null, reason?: string): Promise<GuildMember>;
   public toJSON(): unknown;
   public toString(): UserMention;
   public valueOf(): string;
@@ -1736,27 +1740,27 @@ export class GuildScheduledEvent<Status extends GuildScheduledEventStatus = Guil
   public image: string | null;
   public get partial(): false;
   public coverImageURL(options?: Readonly<BaseImageURLOptions>): string | null;
-  public createInviteURL(options?: GuildScheduledEventInviteURLCreateOptions): Promise<string>;
-  public edit<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public fetch(force?: boolean): Promise<GuildScheduledEvent<Status>>;
-  public delete(): Promise<GuildScheduledEvent<Status>>;
-  public setName(name: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledStartTime(
-    scheduledStartTime: DateResolvable,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledEndTime(scheduledEndTime: DateResolvable, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setDescription(description: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setStatus<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    status: AcceptableStatus,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public setLocation(location: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
-    options?: Options,
-  ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
+  // public createInviteURL(options?: GuildScheduledEventInviteURLCreateOptions): Promise<string>;
+  // public edit<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
+  //   options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
+  // ): Promise<GuildScheduledEvent<AcceptableStatus>>;
+  // public fetch(force?: boolean): Promise<GuildScheduledEvent<Status>>;
+  // public delete(): Promise<GuildScheduledEvent<Status>>;
+  // public setName(name: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setScheduledStartTime(
+  //   scheduledStartTime: DateResolvable,
+  //   reason?: string,
+  // ): Promise<GuildScheduledEvent<Status>>;
+  // public setScheduledEndTime(scheduledEndTime: DateResolvable, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setDescription(description: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setStatus<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
+  //   status: AcceptableStatus,
+  //   reason?: string,
+  // ): Promise<GuildScheduledEvent<AcceptableStatus>>;
+  // public setLocation(location: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
+  //   options?: Options,
+  // ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
   public toString(): string;
   public isActive(): this is GuildScheduledEvent<GuildScheduledEventStatus.Active>;
   public isCanceled(): this is GuildScheduledEvent<GuildScheduledEventStatus.Canceled>;
@@ -1781,10 +1785,10 @@ export class GuildTemplate extends Base {
   public guildId: Snowflake;
   public serializedGuild: APITemplateSerializedSourceGuild;
   public unSynced: boolean | null;
-  public createGuild(name: string, icon?: BufferResolvable | Base64Resolvable): Promise<Guild>;
-  public delete(): Promise<GuildTemplate>;
-  public edit(options?: GuildTemplateEditOptions): Promise<GuildTemplate>;
-  public sync(): Promise<GuildTemplate>;
+  // public createGuild(name: string, icon?: BufferResolvable | Base64Resolvable): Promise<Guild>;
+  // public delete(): Promise<GuildTemplate>;
+  // public edit(options?: GuildTemplateEditOptions): Promise<GuildTemplate>;
+  // public sync(): Promise<GuildTemplate>;
   public static GuildTemplatesPattern: RegExp;
 }
 
@@ -1992,7 +1996,7 @@ export class Invite extends Base {
   public temporary: boolean | null;
   public get url(): string;
   public uses: number | null;
-  public delete(reason?: string): Promise<Invite>;
+  // public delete(reason?: string): Promise<Invite>;
   public toJSON(): unknown;
   public toString(): string;
   public static InvitesPattern: RegExp;
@@ -2121,31 +2125,31 @@ export class Message<InGuild extends boolean = boolean> extends Base {
   public webhookId: Snowflake | null;
   public flags: Readonly<MessageFlagsBitField>;
   public reference: MessageReference | null;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): Promise<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public awaitReactions(options?: AwaitReactionsOptions): Promise<Collection<Snowflake | string, MessageReaction>>;
-  public createReactionCollector(options?: ReactionCollectorOptions): ReactionCollector;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): InteractionCollector<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public delete(): Promise<Message<InGuild>>;
-  public edit(content: string | MessageEditOptions | MessagePayload): Promise<Message<InGuild>>;
+  // public awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, InGuild>,
+  // ): Promise<MappedInteractionTypes<InGuild>[ComponentType]>;
+  // public awaitReactions(options?: AwaitReactionsOptions): Promise<Collection<Snowflake | string, MessageReaction>>;
+  // public createReactionCollector(options?: ReactionCollectorOptions): ReactionCollector;
+  // public createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageCollectorOptionsParams<ComponentType, InGuild>,
+  // ): InteractionCollector<MappedInteractionTypes<InGuild>[ComponentType]>;
+  // public delete(): Promise<Message<InGuild>>;
+  // public edit(content: string | MessageEditOptions | MessagePayload): Promise<Message<InGuild>>;
   public equals(message: Message, rawData: unknown): boolean;
-  public fetchReference(): Promise<Message<InGuild>>;
-  public fetchWebhook(): Promise<Webhook>;
-  public crosspost(): Promise<Message<InGuild>>;
-  public fetch(force?: boolean): Promise<Message<InGuild>>;
-  public pin(reason?: string): Promise<Message<InGuild>>;
-  public react(emoji: EmojiIdentifierResolvable): Promise<MessageReaction>;
-  public removeAttachments(): Promise<Message<InGuild>>;
-  public reply(options: string | MessagePayload | MessageReplyOptions): Promise<Message<InGuild>>;
+  // public fetchReference(): Promise<Message<InGuild>>;
+  // public fetchWebhook(): Promise<Webhook>;
+  // public crosspost(): Promise<Message<InGuild>>;
+  // public fetch(force?: boolean): Promise<Message<InGuild>>;
+  // public pin(reason?: string): Promise<Message<InGuild>>;
+  // public react(emoji: EmojiIdentifierResolvable): Promise<MessageReaction>;
+  // public removeAttachments(): Promise<Message<InGuild>>;
+  // public reply(options: string | MessagePayload | MessageReplyOptions): Promise<Message<InGuild>>;
   public resolveComponent(customId: string): MessageActionRowComponent | null;
-  public startThread(options: StartThreadOptions): Promise<AnyThreadChannel>;
-  public suppressEmbeds(suppress?: boolean): Promise<Message<InGuild>>;
+  // public startThread(options: StartThreadOptions): Promise<AnyThreadChannel>;
+  // public suppressEmbeds(suppress?: boolean): Promise<Message<InGuild>>;
   public toJSON(): unknown;
   public toString(): string;
-  public unpin(reason?: string): Promise<Message<InGuild>>;
+  // public unpin(reason?: string): Promise<Message<InGuild>>;
   public inGuild(): this is Message<true>;
 }
 
@@ -2369,9 +2373,9 @@ export class MessageReaction {
   public message: Message | PartialMessage;
   public get partial(): false;
   public users: ReactionUserManager;
-  public react(): Promise<MessageReaction>;
-  public remove(): Promise<MessageReaction>;
-  public fetch(): Promise<MessageReaction>;
+  // public react(): Promise<MessageReaction>;
+  // public remove(): Promise<MessageReaction>;
+  // public fetch(): Promise<MessageReaction>;
   public toJSON(): unknown;
   public valueOf(): Snowflake | string;
 }
@@ -2528,23 +2532,23 @@ export abstract class ThreadOnlyChannel extends GuildChannel {
   public nsfw: boolean;
   public topic: string | null;
   public defaultSortOrder: SortOrderType | null;
-  public setAvailableTags(tags: readonly GuildForumTagData[], reason?: string): Promise<this>;
-  public setDefaultReactionEmoji(emojiId: DefaultReactionEmoji | null, reason?: string): Promise<this>;
-  public setDefaultThreadRateLimitPerUser(rateLimit: number, reason?: string): Promise<this>;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setDefaultSortOrder(defaultSortOrder: SortOrderType | null, reason?: string): Promise<this>;
+  // public setAvailableTags(tags: readonly GuildForumTagData[], reason?: string): Promise<this>;
+  // public setDefaultReactionEmoji(emojiId: DefaultReactionEmoji | null, reason?: string): Promise<this>;
+  // public setDefaultThreadRateLimitPerUser(rateLimit: number, reason?: string): Promise<this>;
+  // public createInvite(options?: InviteCreateOptions): Promise<Invite>;
+  // public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
+  // public setDefaultAutoArchiveDuration(
+  //   defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<this>;
+  // public setTopic(topic: string | null, reason?: string): Promise<this>;
+  // public setDefaultSortOrder(defaultSortOrder: SortOrderType | null, reason?: string): Promise<this>;
 }
 
 export class ForumChannel extends ThreadOnlyChannel {
   public type: ChannelType.GuildForum;
   public defaultForumLayout: ForumLayoutType;
-  public setDefaultForumLayout(defaultForumLayout: ForumLayoutType, reason?: string): Promise<this>;
+  // public setDefaultForumLayout(defaultForumLayout: ForumLayoutType, reason?: string): Promise<this>;
 }
 
 export class MediaChannel extends ThreadOnlyChannel {
@@ -2610,7 +2614,7 @@ export class Poll extends Base {
   public allowMultiselect: boolean;
   public layoutType: PollLayoutType;
   public resultsFinalized: boolean;
-  public end(): Promise<Message>;
+  // public end(): Promise<Message>;
 }
 
 export interface BaseFetchPollAnswerVotersOptions {
@@ -2626,7 +2630,7 @@ export class PollAnswer extends Base {
   public text: string | null;
   public voteCount: number;
   public get emoji(): GuildEmoji | Emoji | null;
-  public fetchVoters(options?: BaseFetchPollAnswerVotersOptions): Promise<Collection<Snowflake, User>>;
+  // public fetchVoters(options?: BaseFetchPollAnswerVotersOptions): Promise<Collection<Snowflake, User>>;
 }
 
 export class ReactionCollector extends Collector<Snowflake | string, MessageReaction, [User]> {
@@ -2706,22 +2710,22 @@ export class Role extends Base {
   public comparePositionTo(role: RoleResolvable): number;
   public icon: string | null;
   public unicodeEmoji: string | null;
-  public delete(reason?: string): Promise<Role>;
-  public edit(options: RoleEditOptions): Promise<Role>;
+  // public delete(reason?: string): Promise<Role>;
+  // public edit(options: RoleEditOptions): Promise<Role>;
   public equals(role: Role): boolean;
   public iconURL(options?: ImageURLOptions): string | null;
   public permissionsIn(
     channel: NonThreadGuildBasedChannel | Snowflake,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField>;
-  public setColor(color: ColorResolvable, reason?: string): Promise<Role>;
-  public setHoist(hoist?: boolean, reason?: string): Promise<Role>;
-  public setMentionable(mentionable?: boolean, reason?: string): Promise<Role>;
-  public setName(name: string, reason?: string): Promise<Role>;
-  public setPermissions(permissions: PermissionResolvable, reason?: string): Promise<Role>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | EmojiResolvable | null, reason?: string): Promise<Role>;
-  public setPosition(position: number, options?: SetRolePositionOptions): Promise<Role>;
-  public setUnicodeEmoji(unicodeEmoji: string | null, reason?: string): Promise<Role>;
+  // public setColor(color: ColorResolvable, reason?: string): Promise<Role>;
+  // public setHoist(hoist?: boolean, reason?: string): Promise<Role>;
+  // public setMentionable(mentionable?: boolean, reason?: string): Promise<Role>;
+  // public setName(name: string, reason?: string): Promise<Role>;
+  // public setPermissions(permissions: PermissionResolvable, reason?: string): Promise<Role>;
+  // public setIcon(icon: BufferResolvable | Base64Resolvable | EmojiResolvable | null, reason?: string): Promise<Role>;
+  // public setPosition(position: number, options?: SetRolePositionOptions): Promise<Role>;
+  // public setUnicodeEmoji(unicodeEmoji: string | null, reason?: string): Promise<Role>;
   public toJSON(): unknown;
   public toString(): RoleMention;
 }
@@ -3013,8 +3017,8 @@ export class StageChannel extends BaseGuildVoiceChannel {
   public get stageInstance(): StageInstance | null;
   public topic: string | null;
   public type: ChannelType.GuildStageVoice;
-  public createStageInstance(options: StageInstanceCreateOptions): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageChannel>;
+  // public createStageInstance(options: StageInstanceCreateOptions): Promise<StageInstance>;
+  // public setTopic(topic: string): Promise<StageChannel>;
 }
 
 export class DirectoryChannel extends BaseChannel {
@@ -3038,9 +3042,9 @@ export class StageInstance extends Base {
   public get channel(): StageChannel | null;
   public get guild(): Guild | null;
   public get guildScheduledEvent(): GuildScheduledEvent | null;
-  public edit(options: StageInstanceEditOptions): Promise<StageInstance>;
-  public delete(): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageInstance>;
+  // public edit(options: StageInstanceEditOptions): Promise<StageInstance>;
+  // public delete(): Promise<StageInstance>;
+  // public setTopic(topic: string): Promise<StageInstance>;
   public get createdTimestamp(): number;
   public get createdAt(): Date;
 }
@@ -3063,11 +3067,11 @@ export class Sticker extends Base {
   public type: StickerType | null;
   public user: User | null;
   public get url(): string;
-  public fetch(): Promise<Sticker>;
-  public fetchPack(): Promise<StickerPack | null>;
-  public fetchUser(): Promise<User | null>;
-  public edit(options?: GuildStickerEditOptions): Promise<Sticker>;
-  public delete(reason?: string): Promise<Sticker>;
+  // public fetch(): Promise<Sticker>;
+  // public fetchPack(): Promise<StickerPack | null>;
+  // public fetchUser(): Promise<User | null>;
+  // public edit(options?: GuildStickerEditOptions): Promise<Sticker>;
+  // public delete(reason?: string): Promise<Sticker>;
   public equals(other: Sticker | unknown): boolean;
 }
 
@@ -3249,29 +3253,29 @@ export class ThreadChannel<ThreadOnly extends boolean = boolean> extends BaseCha
   public rateLimitPerUser: number | null;
   public type: ThreadChannelType;
   public get unarchivable(): boolean;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: ThreadEditOptions): Promise<AnyThreadChannel>;
-  public join(): Promise<AnyThreadChannel>;
-  public leave(): Promise<AnyThreadChannel>;
+  // public delete(reason?: string): Promise<this>;
+  // public edit(options: ThreadEditOptions): Promise<AnyThreadChannel>;
+  // public join(): Promise<AnyThreadChannel>;
+  // public leave(): Promise<AnyThreadChannel>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public fetchOwner(options?: BaseFetchOptions): Promise<ThreadMember | null>;
-  public fetchStarterMessage(options?: BaseFetchOptions): Promise<Message<true> | null>;
-  public setArchived(archived?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setAutoArchiveDuration(
-    autoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<AnyThreadChannel>;
-  public setInvitable(invitable?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setLocked(locked?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setName(name: string, reason?: string): Promise<AnyThreadChannel>;
-  // The following 3 methods can only be run on forum threads.
-  public setAppliedTags(appliedTags: readonly Snowflake[], reason?: string): Promise<ThreadChannel<true>>;
-  public pin(reason?: string): Promise<ThreadChannel<true>>;
-  public unpin(reason?: string): Promise<ThreadChannel<true>>;
+  // public fetchOwner(options?: BaseFetchOptions): Promise<ThreadMember | null>;
+  // public fetchStarterMessage(options?: BaseFetchOptions): Promise<Message<true> | null>;
+  // public setArchived(archived?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setAutoArchiveDuration(
+  //   autoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<AnyThreadChannel>;
+  // public setInvitable(invitable?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setLocked(locked?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setName(name: string, reason?: string): Promise<AnyThreadChannel>;
+  // // The following 3 methods can only be run on forum threads.
+  // public setAppliedTags(appliedTags: readonly Snowflake[], reason?: string): Promise<ThreadChannel<true>>;
+  // public pin(reason?: string): Promise<ThreadChannel<true>>;
+  // public unpin(reason?: string): Promise<ThreadChannel<true>>;
   public toString(): ChannelMention;
 }
 
@@ -3287,7 +3291,7 @@ export class ThreadMember<HasMemberData extends boolean = boolean> extends Base
   public thread: AnyThreadChannel;
   public get user(): User | null;
   public get partial(): false;
-  public remove(reason?: string): Promise<ThreadMember>;
+  // public remove(reason?: string): Promise<ThreadMember>;
 }
 
 export type ThreadMemberFlagsString = keyof typeof ThreadMemberFlags;
@@ -3339,12 +3343,12 @@ export class User extends Base {
   public avatarURL(options?: ImageURLOptions): string | null;
   public avatarDecorationURL(options?: BaseImageURLOptions): string | null;
   public bannerURL(options?: ImageURLOptions): string | null | undefined;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
+  // public createDM(force?: boolean): Promise<DMChannel>;
+  // public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
   public equals(user: User): boolean;
-  public fetch(force?: boolean): Promise<User>;
-  public fetchFlags(force?: boolean): Promise<UserFlagsBitField>;
+  // public fetch(force?: boolean): Promise<User>;
+  // public fetchFlags(force?: boolean): Promise<UserFlagsBitField>;
   public toString(): UserMention;
 }
 
@@ -3563,13 +3567,13 @@ export class VoiceState extends Base {
   public suppress: boolean | null;
   public requestToSpeakTimestamp: number | null;
 
-  public setDeaf(deaf?: boolean, reason?: string): Promise<GuildMember>;
-  public setMute(mute?: boolean, reason?: string): Promise<GuildMember>;
-  public disconnect(reason?: string): Promise<GuildMember>;
-  public setChannel(channel: GuildVoiceChannelResolvable | null, reason?: string): Promise<GuildMember>;
-  public setRequestToSpeak(request?: boolean): Promise<this>;
-  public setSuppressed(suppressed?: boolean): Promise<this>;
-  public edit(options: VoiceStateEditOptions): Promise<this>;
+  // public setDeaf(deaf?: boolean, reason?: string): Promise<GuildMember>;
+  // public setMute(mute?: boolean, reason?: string): Promise<GuildMember>;
+  // public disconnect(reason?: string): Promise<GuildMember>;
+  // public setChannel(channel: GuildVoiceChannelResolvable | null, reason?: string): Promise<GuildMember>;
+  // public setRequestToSpeak(request?: boolean): Promise<this>;
+  // public setSuppressed(suppressed?: boolean): Promise<this>;
+  // public edit(options: VoiceStateEditOptions): Promise<this>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3600,12 +3604,12 @@ export class Webhook<Type extends WebhookType = WebhookType> {
   public isIncoming(): this is Webhook<WebhookType.Incoming>;
   public isChannelFollower(): this is Webhook<WebhookType.ChannelFollower>;
 
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<Message>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<Message>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<Message>;
+  // public editMessage(
+  //   message: MessageResolvable,
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<Message>;
+  // public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<Message>;
+  // public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<Message>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3615,12 +3619,12 @@ export class WebhookClient extends BaseClient {
   public readonly client: this;
   public options: WebhookClientOptions;
   public token: string;
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<APIMessage>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<APIMessage>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<APIMessage>;
+  // public editMessage(
+  //   message: MessageResolvable,
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<APIMessage>;
+  // public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<APIMessage>;
+  // public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<APIMessage>;
 }
 
 export class WebSocketManager extends EventEmitter {
@@ -3690,7 +3694,7 @@ export class WebSocketShard extends EventEmitter {
 export class Widget extends Base {
   private constructor(client: Client<true>, data: RawWidgetData);
   private _patch(data: RawWidgetData): void;
-  public fetch(): Promise<Widget>;
+  // public fetch(): Promise<Widget>;
   public imageURL(style?: GuildWidgetStyle): string;
   public id: Snowflake;
   public name: string;
@@ -4038,34 +4042,34 @@ export class ApplicationCommandManager<
     null
   >;
   private commandPath({ id, guildId }: { id?: Snowflake; guildId?: Snowflake }): string;
-  public create(command: ApplicationCommandDataResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope>;
-  public delete(command: ApplicationCommandResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope | null>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-  ): Promise<ApplicationCommandScope>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-    guildId: Snowflake,
-  ): Promise<ApplicationCommand>;
-  public fetch(
-    id: Snowflake,
-    options: FetchApplicationCommandOptions & { guildId: Snowflake },
-  ): Promise<ApplicationCommand>;
-  public fetch(options: FetchApplicationCommandOptions): Promise<Collection<string, ApplicationCommandScope>>;
-  public fetch(id: Snowflake, options?: FetchApplicationCommandOptions): Promise<ApplicationCommandScope>;
-  public fetch(
-    id?: Snowflake,
-    options?: FetchApplicationCommandOptions,
-  ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
-  public set(
-    commands: readonly ApplicationCommandDataResolvable[],
-  ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
-  public set(
-    commands: readonly ApplicationCommandDataResolvable[],
-    guildId: Snowflake,
-  ): Promise<Collection<Snowflake, ApplicationCommand>>;
+  // public create(command: ApplicationCommandDataResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope>;
+  // public delete(command: ApplicationCommandResolvable, guildId?: Snowflake): Promise<ApplicationCommandScope | null>;
+  // public edit(
+  //   command: ApplicationCommandResolvable,
+  //   data: Partial<ApplicationCommandDataResolvable>,
+  // ): Promise<ApplicationCommandScope>;
+  // public edit(
+  //   command: ApplicationCommandResolvable,
+  //   data: Partial<ApplicationCommandDataResolvable>,
+  //   guildId: Snowflake,
+  // ): Promise<ApplicationCommand>;
+  // public fetch(
+  //   id: Snowflake,
+  //   options: FetchApplicationCommandOptions & { guildId: Snowflake },
+  // ): Promise<ApplicationCommand>;
+  // public fetch(options: FetchApplicationCommandOptions): Promise<Collection<string, ApplicationCommandScope>>;
+  // public fetch(id: Snowflake, options?: FetchApplicationCommandOptions): Promise<ApplicationCommandScope>;
+  // public fetch(
+  //   id?: Snowflake,
+  //   options?: FetchApplicationCommandOptions,
+  // ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
+  // public set(
+  //   commands: readonly ApplicationCommandDataResolvable[],
+  // ): Promise<Collection<Snowflake, ApplicationCommandScope>>;
+  // public set(
+  //   commands: readonly ApplicationCommandDataResolvable[],
+  //   guildId: Snowflake,
+  // ): Promise<Collection<Snowflake, ApplicationCommand>>;
   private static transformCommand(command: ApplicationCommandDataResolvable): RESTPostAPIApplicationCommandsJSONBody;
 }
 
@@ -4081,41 +4085,41 @@ export class ApplicationCommandPermissionsManager<
   public commandId: CommandIdType;
   public guild: GuildType;
   public guildId: Snowflake | null;
-  public add(
-    options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
-  ): Promise<ApplicationCommandPermissions[]>;
-  public has(
-    options: FetchSingleOptions & {
-      permissionId: ApplicationCommandPermissionIdResolvable;
-      permissionType?: ApplicationCommandPermissionType;
-    },
-  ): Promise<boolean>;
-  public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
-  public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
-  public remove(
-    options:
-      | (FetchSingleOptions & {
-          token: string;
-          channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles?: readonly (RoleResolvable | RolePermissionConstant)[];
-          users: readonly UserResolvable[];
-        })
-      | (FetchSingleOptions & {
-          token: string;
-          channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles: readonly (RoleResolvable | RolePermissionConstant)[];
-          users?: readonly UserResolvable[];
-        })
-      | (FetchSingleOptions & {
-          token: string;
-          channels: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
-          roles?: readonly (RoleResolvable | RolePermissionConstant)[];
-          users?: readonly UserResolvable[];
-        }),
-  ): Promise<ApplicationCommandPermissions[]>;
-  public set(
-    options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
-  ): Promise<ApplicationCommandPermissions[]>;
+  // public add(
+  //   options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
+  // ): Promise<ApplicationCommandPermissions[]>;
+  // public has(
+  //   options: FetchSingleOptions & {
+  //     permissionId: ApplicationCommandPermissionIdResolvable;
+  //     permissionType?: ApplicationCommandPermissionType;
+  //   },
+  // ): Promise<boolean>;
+  // public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
+  // public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
+  // public remove(
+  //   options:
+  //     | (FetchSingleOptions & {
+  //         token: string;
+  //         channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
+  //         roles?: readonly (RoleResolvable | RolePermissionConstant)[];
+  //         users: readonly UserResolvable[];
+  //       })
+  //     | (FetchSingleOptions & {
+  //         token: string;
+  //         channels?: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
+  //         roles: readonly (RoleResolvable | RolePermissionConstant)[];
+  //         users?: readonly UserResolvable[];
+  //       })
+  //     | (FetchSingleOptions & {
+  //         token: string;
+  //         channels: readonly (GuildChannelResolvable | ChannelPermissionConstant)[];
+  //         roles?: readonly (RoleResolvable | RolePermissionConstant)[];
+  //         users?: readonly UserResolvable[];
+  //       }),
+  // ): Promise<ApplicationCommandPermissions[]>;
+  // public set(
+  //   options: FetchSingleOptions & EditApplicationCommandPermissionsMixin,
+  // ): Promise<ApplicationCommandPermissions[]>;
   private permissionsPath(guildId: Snowflake, commandId?: Snowflake): string;
 }
 
@@ -4126,14 +4130,14 @@ export class AutoModerationRuleManager extends CachedManager<
 > {
   private constructor(guild: Guild, iterable: unknown);
   public guild: Guild;
-  public create(options: AutoModerationRuleCreateOptions): Promise<AutoModerationRule>;
-  public edit(
-    autoModerationRule: AutoModerationRuleResolvable,
-    options: AutoModerationRuleEditOptions,
-  ): Promise<AutoModerationRule>;
-  public fetch(options: AutoModerationRuleResolvable | FetchAutoModerationRuleOptions): Promise<AutoModerationRule>;
-  public fetch(options?: FetchAutoModerationRulesOptions): Promise<Collection<Snowflake, AutoModerationRule>>;
-  public delete(autoModerationRule: AutoModerationRuleResolvable, reason?: string): Promise<void>;
+  // public create(options: AutoModerationRuleCreateOptions): Promise<AutoModerationRule>;
+  // public edit(
+  //   autoModerationRule: AutoModerationRuleResolvable,
+  //   options: AutoModerationRuleEditOptions,
+  // ): Promise<AutoModerationRule>;
+  // public fetch(options: AutoModerationRuleResolvable | FetchAutoModerationRuleOptions): Promise<AutoModerationRule>;
+  // public fetch(options?: FetchAutoModerationRulesOptions): Promise<Collection<Snowflake, AutoModerationRule>>;
+  // public delete(autoModerationRule: AutoModerationRuleResolvable, reason?: string): Promise<void>;
 }
 
 export class BaseGuildEmojiManager extends CachedManager<Snowflake, GuildEmoji, EmojiResolvable> {
@@ -4146,15 +4150,15 @@ export class CategoryChannelChildManager extends DataManager<Snowflake, Category
 
   public channel: CategoryChannel;
   public get guild(): Guild;
-  public create<Type extends CategoryChannelType>(
-    options: CategoryCreateChannelOptions & { type: Type },
-  ): Promise<MappedChannelCategoryTypes[Type]>;
-  public create(options: CategoryCreateChannelOptions): Promise<TextChannel>;
+  // public create<Type extends CategoryChannelType>(
+  //   options: CategoryCreateChannelOptions & { type: Type },
+  // ): Promise<MappedChannelCategoryTypes[Type]>;
+  // public create(options: CategoryCreateChannelOptions): Promise<TextChannel>;
 }
 
 export class ChannelManager extends CachedManager<Snowflake, Channel, ChannelResolvable> {
   private constructor(client: Client<true>, iterable: Iterable<RawChannelData>);
-  public fetch(id: Snowflake, options?: FetchChannelOptions): Promise<Channel | null>;
+  // public fetch(id: Snowflake, options?: FetchChannelOptions): Promise<Channel | null>;
 }
 
 export type EntitlementResolvable = Snowflake | Entitlement;
@@ -4183,10 +4187,10 @@ export interface FetchEntitlementsOptions {
 
 export class EntitlementManager extends CachedManager<Snowflake, Entitlement, EntitlementResolvable> {
   private constructor(client: Client<true>, iterable: Iterable<APIEntitlement>);
-  public fetch(options?: FetchEntitlementsOptions): Promise<Collection<Snowflake, Entitlement>>;
-  public createTest(options: GuildEntitlementCreateOptions | UserEntitlementCreateOptions): Promise<Entitlement>;
-  public deleteTest(entitlement: EntitlementResolvable): Promise<void>;
-  public consume(entitlementId: Snowflake): Promise<void>;
+  // public fetch(options?: FetchEntitlementsOptions): Promise<Collection<Snowflake, Entitlement>>;
+  // public createTest(options: GuildEntitlementCreateOptions | UserEntitlementCreateOptions): Promise<Entitlement>;
+  // public deleteTest(entitlement: EntitlementResolvable): Promise<void>;
+  // public consume(entitlementId: Snowflake): Promise<void>;
 }
 
 export interface FetchGuildApplicationCommandFetchOptions extends Omit<FetchApplicationCommandOptions, 'guildId'> {}
@@ -4194,19 +4198,19 @@ export interface FetchGuildApplicationCommandFetchOptions extends Omit<FetchAppl
 export class GuildApplicationCommandManager extends ApplicationCommandManager<ApplicationCommand, {}, Guild> {
   private constructor(guild: Guild, iterable?: Iterable<RawApplicationCommandData>);
   public guild: Guild;
-  public create(command: ApplicationCommandDataResolvable): Promise<ApplicationCommand>;
-  public delete(command: ApplicationCommandResolvable): Promise<ApplicationCommand | null>;
-  public edit(
-    command: ApplicationCommandResolvable,
-    data: Partial<ApplicationCommandDataResolvable>,
-  ): Promise<ApplicationCommand>;
-  public fetch(id: Snowflake, options?: FetchGuildApplicationCommandFetchOptions): Promise<ApplicationCommand>;
-  public fetch(options: FetchGuildApplicationCommandFetchOptions): Promise<Collection<Snowflake, ApplicationCommand>>;
-  public fetch(
-    id?: undefined,
-    options?: FetchGuildApplicationCommandFetchOptions,
-  ): Promise<Collection<Snowflake, ApplicationCommand>>;
-  public set(commands: readonly ApplicationCommandDataResolvable[]): Promise<Collection<Snowflake, ApplicationCommand>>;
+  // public create(command: ApplicationCommandDataResolvable): Promise<ApplicationCommand>;
+  // public delete(command: ApplicationCommandResolvable): Promise<ApplicationCommand | null>;
+  // public edit(
+  //   command: ApplicationCommandResolvable,
+  //   data: Partial<ApplicationCommandDataResolvable>,
+  // ): Promise<ApplicationCommand>;
+  // public fetch(id: Snowflake, options?: FetchGuildApplicationCommandFetchOptions): Promise<ApplicationCommand>;
+  // public fetch(options: FetchGuildApplicationCommandFetchOptions): Promise<Collection<Snowflake, ApplicationCommand>>;
+  // public fetch(
+  //   id?: undefined,
+  //   options?: FetchGuildApplicationCommandFetchOptions,
+  // ): Promise<Collection<Snowflake, ApplicationCommand>>;
+  // public set(commands: readonly ApplicationCommandDataResolvable[]): Promise<Collection<Snowflake, ApplicationCommand>>;
 }
 
 export type MappedGuildChannelTypes = {
@@ -4220,65 +4224,65 @@ export class GuildChannelManager extends CachedManager<Snowflake, GuildBasedChan
   public get channelCountWithoutThreads(): number;
   public guild: Guild;
 
-  public addFollower(
-    channel: NewsChannelResolvable,
-    targetChannel: TextChannelResolvable,
-    reason?: string,
-  ): Promise<Snowflake>;
-  public create<Type extends GuildChannelTypes>(
-    options: GuildChannelCreateOptions & { type: Type },
-  ): Promise<MappedGuildChannelTypes[Type]>;
-  public create(options: GuildChannelCreateOptions): Promise<TextChannel>;
-  public createWebhook(options: WebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
-  public edit(channel: GuildChannelResolvable, data: GuildChannelEditOptions): Promise<GuildChannel>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildBasedChannel | null>;
-  public fetch(
-    id?: undefined,
-    options?: BaseFetchOptions,
-  ): Promise<Collection<Snowflake, NonThreadGuildBasedChannel | null>>;
-  public fetchWebhooks(
-    channel: GuildChannelResolvable,
-  ): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  public setPosition(
-    channel: GuildChannelResolvable,
-    position: number,
-    options?: SetChannelPositionOptions,
-  ): Promise<GuildChannel>;
-  public setPositions(channelPositions: readonly ChannelPosition[]): Promise<Guild>;
-  public fetchActiveThreads(cache?: boolean): Promise<FetchedThreads>;
-  private rawFetchGuildActiveThreads(): Promise<RESTGetAPIGuildThreadsResult>;
-  public delete(channel: GuildChannelResolvable, reason?: string): Promise<void>;
+  // public addFollower(
+  //   channel: NewsChannelResolvable,
+  //   targetChannel: TextChannelResolvable,
+  //   reason?: string,
+  // ): Promise<Snowflake>;
+  // public create<Type extends GuildChannelTypes>(
+  //   options: GuildChannelCreateOptions & { type: Type },
+  // ): Promise<MappedGuildChannelTypes[Type]>;
+  // public create(options: GuildChannelCreateOptions): Promise<TextChannel>;
+  // public createWebhook(options: WebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
+  // public edit(channel: GuildChannelResolvable, data: GuildChannelEditOptions): Promise<GuildChannel>;
+  // public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildBasedChannel | null>;
+  // public fetch(
+  //   id?: undefined,
+  //   options?: BaseFetchOptions,
+  // ): Promise<Collection<Snowflake, NonThreadGuildBasedChannel | null>>;
+  // public fetchWebhooks(
+  //   channel: GuildChannelResolvable,
+  // ): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
+  // public setPosition(
+  //   channel: GuildChannelResolvable,
+  //   position: number,
+  //   options?: SetChannelPositionOptions,
+  // ): Promise<GuildChannel>;
+  // public setPositions(channelPositions: readonly ChannelPosition[]): Promise<Guild>;
+  // public fetchActiveThreads(cache?: boolean): Promise<FetchedThreads>;
+  // private rawFetchGuildActiveThreads(): Promise<RESTGetAPIGuildThreadsResult>;
+  // public delete(channel: GuildChannelResolvable, reason?: string): Promise<void>;
 }
 
 export class GuildEmojiManager extends BaseGuildEmojiManager {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildEmojiData>);
   public guild: Guild;
-  public create(options: GuildEmojiCreateOptions): Promise<GuildEmoji>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildEmoji>;
-  public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, GuildEmoji>>;
-  public fetchAuthor(emoji: EmojiResolvable): Promise<User>;
-  public delete(emoji: EmojiResolvable, reason?: string): Promise<void>;
-  public edit(emoji: EmojiResolvable, options: GuildEmojiEditOptions): Promise<GuildEmoji>;
+  // public create(options: GuildEmojiCreateOptions): Promise<GuildEmoji>;
+  // public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<GuildEmoji>;
+  // public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, GuildEmoji>>;
+  // public fetchAuthor(emoji: EmojiResolvable): Promise<User>;
+  // public delete(emoji: EmojiResolvable, reason?: string): Promise<void>;
+  // public edit(emoji: EmojiResolvable, options: GuildEmojiEditOptions): Promise<GuildEmoji>;
 }
 
 export class GuildEmojiRoleManager extends DataManager<Snowflake, Role, RoleResolvable> {
   private constructor(emoji: GuildEmoji);
   public emoji: GuildEmoji;
   public guild: Guild;
-  public add(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-  ): Promise<GuildEmoji>;
-  public set(roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>): Promise<GuildEmoji>;
-  public remove(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-  ): Promise<GuildEmoji>;
+  // public add(
+  //   roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
+  // ): Promise<GuildEmoji>;
+  // public set(roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>): Promise<GuildEmoji>;
+  // public remove(
+  //   roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
+  // ): Promise<GuildEmoji>;
 }
 
 export class GuildManager extends CachedManager<Snowflake, Guild, GuildResolvable> {
   private constructor(client: Client<true>, iterable?: Iterable<RawGuildData>);
-  public create(options: GuildCreateOptions): Promise<Guild>;
-  public fetch(options: Snowflake | FetchGuildOptions): Promise<Guild>;
-  public fetch(options?: FetchGuildsOptions): Promise<Collection<Snowflake, OAuth2Guild>>;
+  // public create(options: GuildCreateOptions): Promise<Guild>;
+  // public fetch(options: Snowflake | FetchGuildOptions): Promise<Guild>;
+  // public fetch(options?: FetchGuildsOptions): Promise<Collection<Snowflake, OAuth2Guild>>;
   public widgetImageURL(guild: GuildResolvable, style?: GuildWidgetStyle): string;
 }
 
@@ -4292,52 +4296,52 @@ export class GuildMemberManager extends CachedManager<Snowflake, GuildMember, Gu
   private constructor(guild: Guild, iterable?: Iterable<RawGuildMemberData>);
   public guild: Guild;
   public get me(): GuildMember | null;
-  public add(
-    user: UserResolvable,
-    options: AddGuildMemberOptions & { fetchWhenExisting: false },
-  ): Promise<GuildMember | null>;
-  public add(user: UserResolvable, options: AddGuildMemberOptions): Promise<GuildMember>;
-  public ban(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
-  public bulkBan(
-    users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
-    options?: BulkBanOptions,
-  ): Promise<BulkBanResult>;
-  public edit(user: UserResolvable, options: GuildMemberEditOptions): Promise<GuildMember>;
-  public fetch(
-    options: UserResolvable | FetchMemberOptions | (FetchMembersOptions & { user: UserResolvable }),
-  ): Promise<GuildMember>;
-  public fetch(options?: FetchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public fetchMe(options?: BaseFetchOptions): Promise<GuildMember>;
-  public kick(user: UserResolvable, reason?: string): Promise<GuildMember | User | Snowflake>;
-  public list(options?: GuildListMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public prune(options: GuildPruneMembersOptions & { dry?: false; count: false }): Promise<null>;
-  public prune(options?: GuildPruneMembersOptions): Promise<number>;
-  public search(options: GuildSearchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
-  public unban(user: UserResolvable, reason?: string): Promise<User | null>;
-  public addRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
-  public removeRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
+  // public add(
+  //   user: UserResolvable,
+  //   options: AddGuildMemberOptions & { fetchWhenExisting: false },
+  // ): Promise<GuildMember | null>;
+  // public add(user: UserResolvable, options: AddGuildMemberOptions): Promise<GuildMember>;
+  // public ban(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
+  // public bulkBan(
+  //   users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
+  //   options?: BulkBanOptions,
+  // ): Promise<BulkBanResult>;
+  // public edit(user: UserResolvable, options: GuildMemberEditOptions): Promise<GuildMember>;
+  // public fetch(
+  //   options: UserResolvable | FetchMemberOptions | (FetchMembersOptions & { user: UserResolvable }),
+  // ): Promise<GuildMember>;
+  // public fetch(options?: FetchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
+  // public fetchMe(options?: BaseFetchOptions): Promise<GuildMember>;
+  // public kick(user: UserResolvable, reason?: string): Promise<GuildMember | User | Snowflake>;
+  // public list(options?: GuildListMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
+  // public prune(options: GuildPruneMembersOptions & { dry?: false; count: false }): Promise<null>;
+  // public prune(options?: GuildPruneMembersOptions): Promise<number>;
+  // public search(options: GuildSearchMembersOptions): Promise<Collection<Snowflake, GuildMember>>;
+  // public unban(user: UserResolvable, reason?: string): Promise<User | null>;
+  // public addRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
+  // public removeRole(options: AddOrRemoveGuildMemberRoleOptions): Promise<GuildMember | User | Snowflake>;
 }
 
 export class GuildBanManager extends CachedManager<Snowflake, GuildBan, GuildBanResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildBanData>);
   public guild: Guild;
-  public create(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
-  public fetch(options: UserResolvable | FetchBanOptions): Promise<GuildBan>;
-  public fetch(options?: FetchBansOptions): Promise<Collection<Snowflake, GuildBan>>;
-  public remove(user: UserResolvable, reason?: string): Promise<User | null>;
-  public bulkCreate(
-    users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
-    options?: BulkBanOptions,
-  ): Promise<BulkBanResult>;
+  // public create(user: UserResolvable, options?: BanOptions): Promise<GuildMember | User | Snowflake>;
+  // public fetch(options: UserResolvable | FetchBanOptions): Promise<GuildBan>;
+  // public fetch(options?: FetchBansOptions): Promise<Collection<Snowflake, GuildBan>>;
+  // public remove(user: UserResolvable, reason?: string): Promise<User | null>;
+  // public bulkCreate(
+  //   users: ReadonlyCollection<Snowflake, UserResolvable> | readonly UserResolvable[],
+  //   options?: BulkBanOptions,
+  // ): Promise<BulkBanResult>;
 }
 
 export class GuildInviteManager extends DataManager<string, Invite, InviteResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawInviteData>);
   public guild: Guild;
-  public create(channel: GuildInvitableChannelResolvable, options?: InviteCreateOptions): Promise<Invite>;
-  public fetch(options: InviteResolvable | FetchInviteOptions): Promise<Invite>;
-  public fetch(options?: FetchInvitesOptions): Promise<Collection<string, Invite>>;
-  public delete(invite: InviteResolvable, reason?: string): Promise<Invite>;
+  // public create(channel: GuildInvitableChannelResolvable, options?: InviteCreateOptions): Promise<Invite>;
+  // public fetch(options: InviteResolvable | FetchInviteOptions): Promise<Invite>;
+  // public fetch(options?: FetchInvitesOptions): Promise<Collection<string, Invite>>;
+  // public delete(invite: InviteResolvable, reason?: string): Promise<Invite>;
 }
 
 export class GuildScheduledEventManager extends CachedManager<
@@ -4347,34 +4351,34 @@ export class GuildScheduledEventManager extends CachedManager<
 > {
   private constructor(guild: Guild, iterable?: Iterable<RawGuildScheduledEventData>);
   public guild: Guild;
-  public create(options: GuildScheduledEventCreateOptions): Promise<GuildScheduledEvent>;
-  public fetch(): Promise<Collection<Snowflake, GuildScheduledEvent>>;
-  public fetch<
-    Options extends GuildScheduledEventResolvable | FetchGuildScheduledEventOptions | FetchGuildScheduledEventsOptions,
-  >(options?: Options): Promise<GuildScheduledEventManagerFetchResult<Options>>;
-  public edit<
-    Status extends GuildScheduledEventStatus,
-    AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>,
-  >(
-    guildScheduledEvent: GuildScheduledEventResolvable,
-    options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public delete(guildScheduledEvent: GuildScheduledEventResolvable): Promise<void>;
-  public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
-    guildScheduledEvent: GuildScheduledEventResolvable,
-    options?: Options,
-  ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
+  // public create(options: GuildScheduledEventCreateOptions): Promise<GuildScheduledEvent>;
+  // public fetch(): Promise<Collection<Snowflake, GuildScheduledEvent>>;
+  // public fetch<
+  //   Options extends GuildScheduledEventResolvable | FetchGuildScheduledEventOptions | FetchGuildScheduledEventsOptions,
+  // >(options?: Options): Promise<GuildScheduledEventManagerFetchResult<Options>>;
+  // public edit<
+  //   Status extends GuildScheduledEventStatus,
+  //   AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>,
+  // >(
+  //   guildScheduledEvent: GuildScheduledEventResolvable,
+  //   options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
+  // ): Promise<GuildScheduledEvent<AcceptableStatus>>;
+  // public delete(guildScheduledEvent: GuildScheduledEventResolvable): Promise<void>;
+  // public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
+  //   guildScheduledEvent: GuildScheduledEventResolvable,
+  //   options?: Options,
+  // ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
 }
 
 export class GuildStickerManager extends CachedManager<Snowflake, Sticker, StickerResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawStickerData>);
   public guild: Guild;
-  public create(options: GuildStickerCreateOptions): Promise<Sticker>;
-  public edit(sticker: StickerResolvable, data?: GuildStickerEditOptions): Promise<Sticker>;
-  public delete(sticker: StickerResolvable, reason?: string): Promise<void>;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Sticker>;
-  public fetch(id?: Snowflake, options?: BaseFetchOptions): Promise<Collection<Snowflake, Sticker>>;
-  public fetchUser(sticker: StickerResolvable): Promise<User | null>;
+  // public create(options: GuildStickerCreateOptions): Promise<Sticker>;
+  // public edit(sticker: StickerResolvable, data?: GuildStickerEditOptions): Promise<Sticker>;
+  // public delete(sticker: StickerResolvable, reason?: string): Promise<void>;
+  // public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Sticker>;
+  // public fetch(id?: Snowflake, options?: BaseFetchOptions): Promise<Collection<Snowflake, Sticker>>;
+  // public fetchUser(sticker: StickerResolvable): Promise<User | null>;
 }
 
 export class GuildMemberRoleManager extends DataManager<Snowflake, Role, RoleResolvable> {
@@ -4388,18 +4392,18 @@ export class GuildMemberRoleManager extends DataManager<Snowflake, Role, RoleRes
   public member: GuildMember;
   public guild: Guild;
 
-  public add(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
-  public set(
-    roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
-  public remove(
-    roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
-    reason?: string,
-  ): Promise<GuildMember>;
+  // public add(
+  //   roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
+  //   reason?: string,
+  // ): Promise<GuildMember>;
+  // public set(
+  //   roles: readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
+  //   reason?: string,
+  // ): Promise<GuildMember>;
+  // public remove(
+  //   roleOrRoles: RoleResolvable | readonly RoleResolvable[] | ReadonlyCollection<Snowflake, Role>,
+  //   reason?: string,
+  // ): Promise<GuildMember>;
 }
 
 export interface FetchPollAnswerVotersOptions extends BaseFetchPollAnswerVotersOptions {
@@ -4414,19 +4418,19 @@ export abstract class MessageManager<InGuild extends boolean = boolean> extends
 > {
   protected constructor(channel: TextBasedChannel, iterable?: Iterable<RawMessageData>);
   public channel: TextBasedChannel;
-  public delete(message: MessageResolvable): Promise<void>;
-  public edit(
-    message: MessageResolvable,
-    options: string | MessagePayload | MessageEditOptions,
-  ): Promise<Message<InGuild>>;
-  public fetch(options: MessageResolvable | FetchMessageOptions): Promise<Message<InGuild>>;
-  public fetch(options?: FetchMessagesOptions): Promise<Collection<Snowflake, Message<InGuild>>>;
-  public fetchPinned(cache?: boolean): Promise<Collection<Snowflake, Message<InGuild>>>;
-  public react(message: MessageResolvable, emoji: EmojiIdentifierResolvable): Promise<void>;
-  public pin(message: MessageResolvable, reason?: string): Promise<void>;
-  public unpin(message: MessageResolvable, reason?: string): Promise<void>;
-  public endPoll(messageId: Snowflake): Promise<Message>;
-  public fetchPollAnswerVoters(options: FetchPollAnswerVotersOptions): Promise<Collection<Snowflake, User>>;
+  // public delete(message: MessageResolvable): Promise<void>;
+  // public edit(
+  //   message: MessageResolvable,
+  //   options: string | MessagePayload | MessageEditOptions,
+  // ): Promise<Message<InGuild>>;
+  // public fetch(options: MessageResolvable | FetchMessageOptions): Promise<Message<InGuild>>;
+  // public fetch(options?: FetchMessagesOptions): Promise<Collection<Snowflake, Message<InGuild>>>;
+  // public fetchPinned(cache?: boolean): Promise<Collection<Snowflake, Message<InGuild>>>;
+  // public react(message: MessageResolvable, emoji: EmojiIdentifierResolvable): Promise<void>;
+  // public pin(message: MessageResolvable, reason?: string): Promise<void>;
+  // public unpin(message: MessageResolvable, reason?: string): Promise<void>;
+  // public endPoll(messageId: Snowflake): Promise<Message>;
+  // public fetchPollAnswerVoters(options: FetchPollAnswerVotersOptions): Promise<Collection<Snowflake, User>>;
 }
 
 export class DMMessageManager extends MessageManager {
@@ -4444,27 +4448,27 @@ export class PermissionOverwriteManager extends CachedManager<
   PermissionOverwriteResolvable
 > {
   private constructor(client: Client<true>, iterable?: Iterable<RawPermissionOverwriteData>);
-  public set(
-    overwrites: readonly OverwriteResolvable[] | ReadonlyCollection<Snowflake, OverwriteResolvable>,
-    reason?: string,
-  ): Promise<NonThreadGuildBasedChannel>;
-  private upsert(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-    existing?: PermissionOverwrites,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public create(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public edit(
-    userOrRole: RoleResolvable | UserResolvable,
-    options: PermissionOverwriteOptions,
-    overwriteOptions?: GuildChannelOverwriteOptions,
-  ): Promise<NonThreadGuildBasedChannel>;
-  public delete(userOrRole: RoleResolvable | UserResolvable, reason?: string): Promise<NonThreadGuildBasedChannel>;
+  // public set(
+  //   overwrites: readonly OverwriteResolvable[] | ReadonlyCollection<Snowflake, OverwriteResolvable>,
+  //   reason?: string,
+  // ): Promise<NonThreadGuildBasedChannel>;
+  // private upsert(
+  //   userOrRole: RoleResolvable | UserResolvable,
+  //   options: PermissionOverwriteOptions,
+  //   overwriteOptions?: GuildChannelOverwriteOptions,
+  //   existing?: PermissionOverwrites,
+  // ): Promise<NonThreadGuildBasedChannel>;
+  // public create(
+  //   userOrRole: RoleResolvable | UserResolvable,
+  //   options: PermissionOverwriteOptions,
+  //   overwriteOptions?: GuildChannelOverwriteOptions,
+  // ): Promise<NonThreadGuildBasedChannel>;
+  // public edit(
+  //   userOrRole: RoleResolvable | UserResolvable,
+  //   options: PermissionOverwriteOptions,
+  //   overwriteOptions?: GuildChannelOverwriteOptions,
+  // ): Promise<NonThreadGuildBasedChannel>;
+  // public delete(userOrRole: RoleResolvable | UserResolvable, reason?: string): Promise<NonThreadGuildBasedChannel>;
 }
 
 export class PresenceManager extends CachedManager<Snowflake, Presence, PresenceResolvable> {
@@ -4474,14 +4478,14 @@ export class PresenceManager extends CachedManager<Snowflake, Presence, Presence
 export class ReactionManager extends CachedManager<Snowflake | string, MessageReaction, MessageReactionResolvable> {
   private constructor(message: Message, iterable?: Iterable<RawMessageReactionData>);
   public message: Message;
-  public removeAll(): Promise<Message>;
+  // public removeAll(): Promise<Message>;
 }
 
 export class ReactionUserManager extends CachedManager<Snowflake, User, UserResolvable> {
   private constructor(reaction: MessageReaction, iterable?: Iterable<RawUserData>);
   public reaction: MessageReaction;
-  public fetch(options?: FetchReactionUsersOptions): Promise<Collection<Snowflake, User>>;
-  public remove(user?: UserResolvable): Promise<MessageReaction>;
+  // public fetch(options?: FetchReactionUsersOptions): Promise<Collection<Snowflake, User>>;
+  // public remove(user?: UserResolvable): Promise<MessageReaction>;
 }
 
 export class RoleManager extends CachedManager<Snowflake, Role, RoleResolvable> {
@@ -4491,23 +4495,23 @@ export class RoleManager extends CachedManager<Snowflake, Role, RoleResolvable>
   public guild: Guild;
   public get premiumSubscriberRole(): Role | null;
   public botRoleFor(user: UserResolvable): Role | null;
-  public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Role | null>;
-  public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, Role>>;
-  public create(options?: RoleCreateOptions): Promise<Role>;
-  public edit(role: RoleResolvable, options: RoleEditOptions): Promise<Role>;
-  public delete(role: RoleResolvable, reason?: string): Promise<void>;
-  public setPosition(role: RoleResolvable, position: number, options?: SetRolePositionOptions): Promise<Role>;
-  public setPositions(rolePositions: readonly RolePosition[]): Promise<Guild>;
+  // public fetch(id: Snowflake, options?: BaseFetchOptions): Promise<Role | null>;
+  // public fetch(id?: undefined, options?: BaseFetchOptions): Promise<Collection<Snowflake, Role>>;
+  // public create(options?: RoleCreateOptions): Promise<Role>;
+  // public edit(role: RoleResolvable, options: RoleEditOptions): Promise<Role>;
+  // public delete(role: RoleResolvable, reason?: string): Promise<void>;
+  // public setPosition(role: RoleResolvable, position: number, options?: SetRolePositionOptions): Promise<Role>;
+  // public setPositions(rolePositions: readonly RolePosition[]): Promise<Guild>;
   public comparePositions(role1: RoleResolvable, role2: RoleResolvable): number;
 }
 
 export class StageInstanceManager extends CachedManager<Snowflake, StageInstance, StageInstanceResolvable> {
   private constructor(guild: Guild, iterable?: Iterable<RawStageInstanceData>);
   public guild: Guild;
-  public create(channel: StageChannelResolvable, options: StageInstanceCreateOptions): Promise<StageInstance>;
-  public fetch(channel: StageChannelResolvable, options?: BaseFetchOptions): Promise<StageInstance>;
-  public edit(channel: StageChannelResolvable, options: StageInstanceEditOptions): Promise<StageInstance>;
-  public delete(channel: StageChannelResolvable): Promise<void>;
+  // public create(channel: StageChannelResolvable, options: StageInstanceCreateOptions): Promise<StageInstance>;
+  // public fetch(channel: StageChannelResolvable, options?: BaseFetchOptions): Promise<StageInstance>;
+  // public edit(channel: StageChannelResolvable, options: StageInstanceEditOptions): Promise<StageInstance>;
+  // public delete(channel: StageChannelResolvable): Promise<void>;
 }
 
 export class ThreadManager<ThreadOnly extends boolean = boolean> extends CachedManager<
@@ -4520,53 +4524,53 @@ export class ThreadManager<ThreadOnly extends boolean = boolean> extends CachedM
     iterable?: Iterable<RawThreadChannelData>,
   );
   public channel: If<ThreadOnly, ForumChannel | MediaChannel, TextChannel | NewsChannel>;
-  public fetch(options: ThreadChannelResolvable, cacheOptions?: BaseFetchOptions): Promise<AnyThreadChannel | null>;
-  public fetch(
-    options: FetchThreadsOptions & { archived: FetchArchivedThreadOptions },
-    cacheOptions?: { cache?: boolean },
-  ): Promise<FetchedThreadsMore>;
-  public fetch(options?: FetchThreadsOptions, cacheOptions?: { cache?: boolean }): Promise<FetchedThreads>;
-  public fetchArchived(options?: FetchArchivedThreadOptions, cache?: boolean): Promise<FetchedThreadsMore>;
-  public fetchActive(cache?: boolean): Promise<FetchedThreads>;
+  // public fetch(options: ThreadChannelResolvable, cacheOptions?: BaseFetchOptions): Promise<AnyThreadChannel | null>;
+  // public fetch(
+  //   options: FetchThreadsOptions & { archived: FetchArchivedThreadOptions },
+  //   cacheOptions?: { cache?: boolean },
+  // ): Promise<FetchedThreadsMore>;
+  // public fetch(options?: FetchThreadsOptions, cacheOptions?: { cache?: boolean }): Promise<FetchedThreads>;
+  // public fetchArchived(options?: FetchArchivedThreadOptions, cache?: boolean): Promise<FetchedThreadsMore>;
+  // public fetchActive(cache?: boolean): Promise<FetchedThreads>;
 }
 
 export class GuildTextThreadManager<AllowedThreadType> extends ThreadManager<false> {
-  public create(options: GuildTextThreadCreateOptions<AllowedThreadType>): Promise<ThreadChannel>;
+  // public create(options: GuildTextThreadCreateOptions<AllowedThreadType>): Promise<ThreadChannel>;
 }
 
 export class GuildForumThreadManager extends ThreadManager<true> {
-  public create(options: GuildForumThreadCreateOptions): Promise<ThreadChannel>;
+  // public create(options: GuildForumThreadCreateOptions): Promise<ThreadChannel>;
 }
 
 export class ThreadMemberManager extends CachedManager<Snowflake, ThreadMember, ThreadMemberResolvable> {
   private constructor(thread: ThreadChannel, iterable?: Iterable<RawThreadMemberData>);
   public thread: AnyThreadChannel;
   public get me(): ThreadMember | null;
-  public add(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
+  // public add(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
 
-  public fetch(
-    options: ThreadMember<true> | ((FetchThreadMemberOptions & { withMember: true }) | { member: ThreadMember<true> }),
-  ): Promise<ThreadMember<true>>;
+  // public fetch(
+  //   options: ThreadMember<true> | ((FetchThreadMemberOptions & { withMember: true }) | { member: ThreadMember<true> }),
+  // ): Promise<ThreadMember<true>>;
 
-  public fetch(options: ThreadMemberResolvable | FetchThreadMemberOptions): Promise<ThreadMember>;
+  // public fetch(options: ThreadMemberResolvable | FetchThreadMemberOptions): Promise<ThreadMember>;
 
-  public fetch(
-    options: FetchThreadMembersWithGuildMemberDataOptions,
-  ): Promise<Collection<Snowflake, ThreadMember<true>>>;
+  // public fetch(
+  //   options: FetchThreadMembersWithGuildMemberDataOptions,
+  // ): Promise<Collection<Snowflake, ThreadMember<true>>>;
 
-  public fetch(options?: FetchThreadMembersWithoutGuildMemberDataOptions): Promise<Collection<Snowflake, ThreadMember>>;
-  public fetchMe(options?: BaseFetchOptions): Promise<ThreadMember>;
-  public remove(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
+  // public fetch(options?: FetchThreadMembersWithoutGuildMemberDataOptions): Promise<Collection<Snowflake, ThreadMember>>;
+  // public fetchMe(options?: BaseFetchOptions): Promise<ThreadMember>;
+  // public remove(member: UserResolvable | '@me', reason?: string): Promise<Snowflake>;
 }
 
 export class UserManager extends CachedManager<Snowflake, User, UserResolvable> {
   private constructor(client: Client<true>, iterable?: Iterable<RawUserData>);
   private dmChannel(userId: Snowflake): DMChannel | null;
-  public createDM(user: UserResolvable, options?: BaseFetchOptions): Promise<DMChannel>;
-  public deleteDM(user: UserResolvable): Promise<DMChannel>;
-  public fetch(user: UserResolvable, options?: BaseFetchOptions): Promise<User>;
-  public fetchFlags(user: UserResolvable, options?: BaseFetchOptions): Promise<UserFlagsBitField>;
-  public send(user: UserResolvable, options: string | MessagePayload | MessageCreateOptions): Promise<Message>;
+  // public createDM(user: UserResolvable, options?: BaseFetchOptions): Promise<DMChannel>;
+  // public deleteDM(user: UserResolvable): Promise<DMChannel>;
+  // public fetch(user: UserResolvable, options?: BaseFetchOptions): Promise<User>;
+  // public fetchFlags(user: UserResolvable, options?: BaseFetchOptions): Promise<UserFlagsBitField>;
+  // public send(user: UserResolvable, options: string | MessagePayload | MessageCreateOptions): Promise<Message>;
 }
 
 export class VoiceStateManager extends CachedManager<Snowflake, VoiceState, typeof VoiceState> {
@@ -4585,7 +4589,7 @@ export class VoiceStateManager extends CachedManager<Snowflake, VoiceState, type
 export type Constructable<Entity> = abstract new (...args: any[]) => Entity;
 
 export interface PartialTextBasedChannelFields<InGuild extends boolean = boolean> {
-  send(options: string | MessagePayload | MessageCreateOptions): Promise<Message<InGuild>>;
+  // send(options: string | MessagePayload | MessageCreateOptions): Promise<Message<InGuild>>;
 }
 
 export interface TextBasedChannelFields<InGuild extends boolean = boolean>
@@ -4595,47 +4599,47 @@ export interface TextBasedChannelFields<InGuild extends boolean = boolean>
   lastPinTimestamp: number | null;
   get lastPinAt(): Date | null;
   messages: If<InGuild, GuildMessageManager, DMMessageManager>;
-  awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, true>,
-  ): Promise<MappedInteractionTypes[ComponentType]>;
-  awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<Snowflake, Message>>;
-  bulkDelete(
-    messages: Collection<Snowflake, Message> | readonly MessageResolvable[] | number,
-    filterOld?: boolean,
-  ): Promise<Collection<Snowflake, Message | PartialMessage | undefined>>;
-  createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageChannelCollectorOptionsParams<ComponentType, true>,
-  ): InteractionCollector<MappedInteractionTypes[ComponentType]>;
-  createMessageCollector(options?: MessageCollectorOptions): MessageCollector;
-  createWebhook(options: ChannelWebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
-  fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  sendTyping(): Promise<void>;
-  setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this>;
-  setNSFW(nsfw?: boolean, reason?: string): Promise<this>;
+  // awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, true>,
+  // ): Promise<MappedInteractionTypes[ComponentType]>;
+  // awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<Snowflake, Message>>;
+  // bulkDelete(
+  //   messages: Collection<Snowflake, Message> | readonly MessageResolvable[] | number,
+  //   filterOld?: boolean,
+  // ): Promise<Collection<Snowflake, Message | PartialMessage | undefined>>;
+  // createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageChannelCollectorOptionsParams<ComponentType, true>,
+  // ): InteractionCollector<MappedInteractionTypes[ComponentType]>;
+  // createMessageCollector(options?: MessageCollectorOptions): MessageCollector;
+  // createWebhook(options: ChannelWebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
+  // fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
+  // sendTyping(): Promise<void>;
+  // setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this>;
+  // setNSFW(nsfw?: boolean, reason?: string): Promise<this>;
 }
 
 /** @internal */
 export interface PartialWebhookFields {
   id: Snowflake;
   get url(): string;
-  deleteMessage(message: MessageResolvable | APIMessage | '@original', threadId?: Snowflake): Promise<void>;
-  editMessage(
-    message: MessageResolvable | '@original',
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<APIMessage | Message>;
-  fetchMessage(message: Snowflake | '@original', options?: WebhookFetchMessageOptions): Promise<APIMessage | Message>;
-  send(
-    options: string | MessagePayload | InteractionReplyOptions | WebhookMessageCreateOptions,
-  ): Promise<APIMessage | Message>;
+  // deleteMessage(message: MessageResolvable | APIMessage | '@original', threadId?: Snowflake): Promise<void>;
+  // editMessage(
+  //   message: MessageResolvable | '@original',
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<APIMessage | Message>;
+  // fetchMessage(message: Snowflake | '@original', options?: WebhookFetchMessageOptions): Promise<APIMessage | Message>;
+  // send(
+  //   options: string | MessagePayload | InteractionReplyOptions | WebhookMessageCreateOptions,
+  // ): Promise<APIMessage | Message>;
 }
 
 /** @internal */
 export interface WebhookFields extends PartialWebhookFields {
   get createdAt(): Date;
   get createdTimestamp(): number;
-  delete(reason?: string): Promise<void>;
-  edit(options: WebhookEditOptions): Promise<this>;
-  sendSlackMessage(body: unknown): Promise<boolean>;
+  // delete(reason?: string): Promise<void>;
+  // edit(options: WebhookEditOptions): Promise<this>;
+  // sendSlackMessage(body: unknown): Promise<boolean>;
 }
 
 //#endregion

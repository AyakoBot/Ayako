diff --git a/typings/index.d.ts b/typings/index.d.ts
index b1071e1d355883fbb3027da9b6be066ee33cbe05..2b979e6cd107ca291c3fd196e41f223453d97287 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -1,3 +1,5 @@
+import Util from '@ayako/bot/src/BaseClient/Bot/Util.js';
+import * as Sharding from 'discord-hybrid-sharding';
 import {
   ActionRowBuilder as BuilderActionRow,
   MessageActionRowComponentBuilder,
@@ -402,26 +404,26 @@ export class AutoModerationRule extends Base {
   public setEventType(eventType: AutoModerationRuleEventType, reason?: string): Promise<AutoModerationRule>;
   public setKeywordFilter(keywordFilter: readonly string[], reason?: string): Promise<AutoModerationRule>;
   public setRegexPatterns(regexPatterns: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setPresets(
-    presets: readonly AutoModerationRuleKeywordPresetType[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setAllowList(allowList: readonly string[], reason?: string): Promise<AutoModerationRule>;
-  public setMentionTotalLimit(mentionTotalLimit: number, reason?: string): Promise<AutoModerationRule>;
-  public setMentionRaidProtectionEnabled(
-    mentionRaidProtectionEnabled: boolean,
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setActions(actions: readonly AutoModerationActionOptions[], reason?: string): Promise<AutoModerationRule>;
-  public setEnabled(enabled?: boolean, reason?: string): Promise<AutoModerationRule>;
-  public setExemptRoles(
-    roles: ReadonlyCollection<Snowflake, Role> | readonly RoleResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
-  public setExemptChannels(
-    channels: ReadonlyCollection<Snowflake, GuildBasedChannel> | readonly GuildChannelResolvable[],
-    reason?: string,
-  ): Promise<AutoModerationRule>;
+  // public setPresets(
+  //   presets: readonly AutoModerationRuleKeywordPresetType[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setAllowList(allowList: readonly string[], reason?: string): Promise<AutoModerationRule>;
+  // public setMentionTotalLimit(mentionTotalLimit: number, reason?: string): Promise<AutoModerationRule>;
+  // public setMentionRaidProtectionEnabled(
+  //   mentionRaidProtectionEnabled: boolean,
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setActions(actions: readonly AutoModerationActionOptions[], reason?: string): Promise<AutoModerationRule>;
+  // public setEnabled(enabled?: boolean, reason?: string): Promise<AutoModerationRule>;
+  // public setExemptRoles(
+  //   roles: ReadonlyCollection<Snowflake, Role> | readonly RoleResolvable[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
+  // public setExemptChannels(
+  //   channels: ReadonlyCollection<Snowflake, GuildBasedChannel> | readonly GuildChannelResolvable[],
+  //   reason?: string,
+  // ): Promise<AutoModerationRule>;
 }
 
 export abstract class Application extends Base {
@@ -606,9 +608,9 @@ export abstract class CommandInteraction<Cached extends CacheType = CacheType> e
   ): Promise<void>;
   /** @deprecated Sending a premium-style button is the new Discord behaviour. */
   public sendPremiumRequired(): Promise<void>;
-  public awaitModalSubmit(
-    options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
-  ): Promise<ModalSubmitInteraction<Cached>>;
+  // public awaitModalSubmit(
+  //   options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
+  // ): Promise<ModalSubmitInteraction<Cached>>;
   private transformOption(
     option: APIApplicationCommandOption,
     resolved: APIApplicationCommandInteractionData['resolved'],
@@ -622,12 +624,12 @@ export class InteractionResponse<Cached extends boolean = boolean> {
   public id: Snowflake;
   public get createdAt(): Date;
   public get createdTimestamp(): number;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, Cached>,
-  ): Promise<MappedInteractionTypes<Cached>[ComponentType]>;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, Cached>,
-  ): InteractionCollector<MappedInteractionTypes<Cached>[ComponentType]>;
+  // public awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, Cached>,
+  // ): Promise<MappedInteractionTypes<Cached>[ComponentType]>;
+  // public createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageCollectorOptionsParams<ComponentType, Cached>,
+  // ): InteractionCollector<MappedInteractionTypes<Cached>[ComponentType]>;
   public delete(): Promise<void>;
   public edit(options: string | MessagePayload | WebhookMessageEditOptions): Promise<Message>;
   public fetch(): Promise<Message>;
@@ -672,15 +674,15 @@ export class BaseGuildTextChannel extends GuildChannel {
   public nsfw: boolean;
   public threads: GuildTextThreadManager<AllowedThreadTypeForTextChannel | AllowedThreadTypeForNewsChannel>;
   public topic: string | null;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setType(type: ChannelType.GuildText, reason?: string): Promise<TextChannel>;
-  public setType(type: ChannelType.GuildAnnouncement, reason?: string): Promise<NewsChannel>;
+  // public createInvite(options?: InviteCreateOptions): Promise<Invite>;
+  // public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
+  // public setDefaultAutoArchiveDuration(
+  //   defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<this>;
+  // public setTopic(topic: string | null, reason?: string): Promise<this>;
+  // public setType(type: ChannelType.GuildText, reason?: string): Promise<TextChannel>;
+  // public setType(type: ChannelType.GuildAnnouncement, reason?: string): Promise<NewsChannel>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -972,8 +974,8 @@ export abstract class BaseChannel extends Base {
   public get partial(): false;
   public type: ChannelType;
   public get url(): string;
-  public delete(): Promise<this>;
-  public fetch(force?: boolean): Promise<this>;
+  // public delete(): Promise<this>;
+  // public fetch(force?: boolean): Promise<this>;
   public isThread(): this is AnyThreadChannel;
   public isTextBased(): this is TextBasedChannel;
   public isDMBased(): this is PartialGroupDMChannel | DMChannel | PartialDMChannel;
@@ -998,6 +1000,8 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   // This a technique used to brand the ready state. Or else we'll get `never` errors on typeguard checks.
   private readonly _ready: Ready;
 
+  public util: typeof Util;
+  public cluster?: Sharding.ClusterClient<typeof this>;
   public application: If<Ready, ClientApplication>;
   public channels: ChannelManager;
   public get emojis(): BaseGuildEmojiManager;
@@ -1006,7 +1010,7 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   public get readyAt(): If<Ready, Date>;
   public readyTimestamp: If<Ready, number>;
   public sweepers: Sweepers;
-  public shard: ShardClientUtil | null;
+  // public shard: ShardClientUtil | null;
   public token: If<Ready, string, string | null>;
   public get uptime(): If<Ready, number>;
   public user: If<Ready, ClientUser>;
@@ -1014,18 +1018,18 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   public voice: ClientVoiceManager;
   public ws: WebSocketManager;
   public destroy(): Promise<void>;
-  public deleteWebhook(id: Snowflake, options?: WebhookDeleteOptions): Promise<void>;
-  public fetchGuildPreview(guild: GuildResolvable): Promise<GuildPreview>;
-  public fetchInvite(invite: InviteResolvable, options?: ClientFetchInviteOptions): Promise<Invite>;
-  public fetchGuildTemplate(template: GuildTemplateResolvable): Promise<GuildTemplate>;
-  public fetchVoiceRegions(): Promise<Collection<string, VoiceRegion>>;
-  public fetchSticker(id: Snowflake): Promise<Sticker>;
-  public fetchStickerPacks(): Promise<Collection<Snowflake, StickerPack>>;
+  // public deleteWebhook(id: Snowflake, options?: WebhookDeleteOptions): Promise<void>;
+  // public fetchGuildPreview(guild: GuildResolvable): Promise<GuildPreview>;
+  // public fetchInvite(invite: InviteResolvable, options?: ClientFetchInviteOptions): Promise<Invite>;
+  // public fetchGuildTemplate(template: GuildTemplateResolvable): Promise<GuildTemplate>;
+  // public fetchVoiceRegions(): Promise<Collection<string, VoiceRegion>>;
+  // public fetchSticker(id: Snowflake): Promise<Sticker>;
+  // public fetchStickerPacks(): Promise<Collection<Snowflake, StickerPack>>;
   /** @deprecated Use {@link Client.fetchStickerPacks} instead. */
-  public fetchPremiumStickerPacks(): ReturnType<Client['fetchStickerPacks']>;
-  public fetchWebhook(id: Snowflake, token?: string): Promise<Webhook>;
-  public fetchGuildWidget(guild: GuildResolvable): Promise<Widget>;
-  public generateInvite(options?: InviteGenerationOptions): string;
+  // public fetchPremiumStickerPacks(): ReturnType<Client['fetchStickerPacks']>;
+  // public fetchWebhook(id: Snowflake, token?: string): Promise<Webhook>;
+  // public fetchGuildWidget(guild: GuildResolvable): Promise<Widget>;
+  // public generateInvite(options?: InviteGenerationOptions): string;
   public login(token?: string): Promise<string>;
   public isReady(): this is Client<true>;
   public toJSON(): unknown;
@@ -1075,13 +1079,13 @@ export class ClientApplication extends Application {
   public interactionsEndpointURL: string | null;
   public roleConnectionsVerificationURL: string | null;
   public rpcOrigins: string[];
-  public edit(options: ClientApplicationEditOptions): Promise<ClientApplication>;
-  public fetch(): Promise<ClientApplication>;
-  public fetchRoleConnectionMetadataRecords(): Promise<ApplicationRoleConnectionMetadata[]>;
-  public fetchSKUs(): Promise<Collection<Snowflake, SKU>>;
-  public editRoleConnectionMetadataRecords(
-    records: readonly ApplicationRoleConnectionMetadataEditOptions[],
-  ): Promise<ApplicationRoleConnectionMetadata[]>;
+  // public edit(options: ClientApplicationEditOptions): Promise<ClientApplication>;
+  // public fetch(): Promise<ClientApplication>;
+  // public fetchRoleConnectionMetadataRecords(): Promise<ApplicationRoleConnectionMetadata[]>;
+  // public fetchSKUs(): Promise<Collection<Snowflake, SKU>>;
+  // public editRoleConnectionMetadataRecords(
+  //   records: readonly ApplicationRoleConnectionMetadataEditOptions[],
+  // ): Promise<ApplicationRoleConnectionMetadata[]>;
 }
 
 export class ClientPresence extends Presence {
@@ -1324,7 +1328,7 @@ export class DMChannel extends BaseChannel {
   public recipientId: Snowflake;
   public get recipient(): User | null;
   public type: ChannelType.DM;
-  public fetch(force?: boolean): Promise<this>;
+  // public fetch(force?: boolean): Promise<this>;
   public toString(): UserMention;
 }
 
@@ -1357,8 +1361,8 @@ export class Entitlement extends Base {
   public get guild(): Guild | null;
   public get startsAt(): Date | null;
   public get endsAt(): Date | null;
-  public consume(): Promise<void>;
-  public fetchUser(): Promise<User>;
+  // public consume(): Promise<void>;
+  // public fetchUser(): Promise<User>;
   public isActive(): boolean;
   public isTest(): this is this & {
     startsTimestamp: null;
@@ -1432,54 +1436,54 @@ export class Guild extends AnonymousGuild {
   public delete(): Promise<Guild>;
   public discoverySplashURL(options?: ImageURLOptions): string | null;
   public edit(options: GuildEditOptions): Promise<Guild>;
-  public editOnboarding(options: GuildOnboardingEditOptions): Promise<GuildOnboarding>;
-  public editWelcomeScreen(options: WelcomeScreenEditOptions): Promise<WelcomeScreen>;
+  // public editOnboarding(options: GuildOnboardingEditOptions): Promise<GuildOnboarding>;
+  // public editWelcomeScreen(options: WelcomeScreenEditOptions): Promise<WelcomeScreen>;
   public equals(guild: Guild): boolean;
-  public fetchAuditLogs<Event extends GuildAuditLogsResolvable = null>(
-    options?: GuildAuditLogsFetchOptions<Event>,
-  ): Promise<GuildAuditLogs<Event>>;
-  public fetchIntegrations(): Promise<Collection<Snowflake | string, Integration>>;
-  public fetchOnboarding(): Promise<GuildOnboarding>;
-  public fetchOwner(options?: BaseFetchOptions): Promise<GuildMember>;
-  public fetchPreview(): Promise<GuildPreview>;
-  public fetchTemplates(): Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
-  public fetchVanityData(): Promise<Vanity>;
-  public fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  public fetchWelcomeScreen(): Promise<WelcomeScreen>;
-  public fetchWidget(): Promise<Widget>;
-  public fetchWidgetSettings(): Promise<GuildWidgetSettings>;
+  // public fetchAuditLogs<Event extends GuildAuditLogsResolvable = null>(
+  //   options?: GuildAuditLogsFetchOptions<Event>,
+  // ): Promise<GuildAuditLogs<Event>>;
+  // public fetchIntegrations(): Promise<Collection<Snowflake | string, Integration>>;
+  // public fetchOnboarding(): Promise<GuildOnboarding>;
+  // public fetchOwner(options?: BaseFetchOptions): Promise<GuildMember>;
+  // public fetchPreview(): Promise<GuildPreview>;
+  // public fetchTemplates(): Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
+  // public fetchVanityData(): Promise<Vanity>;
+  // public fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
+  // public fetchWelcomeScreen(): Promise<WelcomeScreen>;
+  // public fetchWidget(): Promise<Widget>;
+  // public fetchWidgetSettings(): Promise<GuildWidgetSettings>;
   public widgetImageURL(style?: GuildWidgetStyle): string;
-  public leave(): Promise<Guild>;
-  public disableInvites(disabled?: boolean): Promise<Guild>;
-  public setAFKChannel(afkChannel: VoiceChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setAFKTimeout(afkTimeout: number, reason?: string): Promise<Guild>;
-  public setBanner(banner: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setDefaultMessageNotifications(
-    defaultMessageNotifications: GuildDefaultMessageNotifications | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setDiscoverySplash(
-    discoverySplash: BufferResolvable | Base64Resolvable | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setExplicitContentFilter(
-    explicitContentFilter: GuildExplicitContentFilter | null,
-    reason?: string,
-  ): Promise<Guild>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setName(name: string, reason?: string): Promise<Guild>;
-  public setOwner(owner: GuildMemberResolvable, reason?: string): Promise<Guild>;
-  public setPreferredLocale(preferredLocale: Locale | null, reason?: string): Promise<Guild>;
-  public setPublicUpdatesChannel(publicUpdatesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setRulesChannel(rulesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSafetyAlertsChannel(safetyAlertsChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSplash(splash: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannel(systemChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
-  public setSystemChannelFlags(systemChannelFlags: SystemChannelFlagsResolvable, reason?: string): Promise<Guild>;
-  public setVerificationLevel(verificationLevel: GuildVerificationLevel | null, reason?: string): Promise<Guild>;
-  public setPremiumProgressBarEnabled(enabled?: boolean, reason?: string): Promise<Guild>;
-  public setWidgetSettings(settings: GuildWidgetSettingsData, reason?: string): Promise<Guild>;
-  public setMFALevel(level: GuildMFALevel, reason?: string): Promise<Guild>;
+  // public leave(): Promise<Guild>;
+  // public disableInvites(disabled?: boolean): Promise<Guild>;
+  // public setAFKChannel(afkChannel: VoiceChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setAFKTimeout(afkTimeout: number, reason?: string): Promise<Guild>;
+  // public setBanner(banner: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setDefaultMessageNotifications(
+  //   defaultMessageNotifications: GuildDefaultMessageNotifications | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setDiscoverySplash(
+  //   discoverySplash: BufferResolvable | Base64Resolvable | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setExplicitContentFilter(
+  //   explicitContentFilter: GuildExplicitContentFilter | null,
+  //   reason?: string,
+  // ): Promise<Guild>;
+  // public setIcon(icon: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setName(name: string, reason?: string): Promise<Guild>;
+  // public setOwner(owner: GuildMemberResolvable, reason?: string): Promise<Guild>;
+  // public setPreferredLocale(preferredLocale: Locale | null, reason?: string): Promise<Guild>;
+  // public setPublicUpdatesChannel(publicUpdatesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setRulesChannel(rulesChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSafetyAlertsChannel(safetyAlertsChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSplash(splash: BufferResolvable | Base64Resolvable | null, reason?: string): Promise<Guild>;
+  // public setSystemChannel(systemChannel: TextChannelResolvable | null, reason?: string): Promise<Guild>;
+  // public setSystemChannelFlags(systemChannelFlags: SystemChannelFlagsResolvable, reason?: string): Promise<Guild>;
+  // public setVerificationLevel(verificationLevel: GuildVerificationLevel | null, reason?: string): Promise<Guild>;
+  // public setPremiumProgressBarEnabled(enabled?: boolean, reason?: string): Promise<Guild>;
+  // public setWidgetSettings(settings: GuildWidgetSettingsData, reason?: string): Promise<Guild>;
+  // public setMFALevel(level: GuildMFALevel, reason?: string): Promise<Guild>;
   public toJSON(): unknown;
 }
 
@@ -1534,7 +1538,7 @@ export class GuildBan extends Base {
   public user: User;
   public get partial(): boolean;
   public reason?: string | null;
-  public fetch(force?: boolean): Promise<GuildBan>;
+  // public fetch(force?: boolean): Promise<GuildBan>;
 }
 
 export abstract class GuildChannel extends BaseChannel {
@@ -1558,19 +1562,19 @@ export abstract class GuildChannel extends BaseChannel {
   public rawPosition: number;
   public type: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>;
   public get viewable(): boolean;
-  public clone(options?: GuildChannelCloneOptions): Promise<this>;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: GuildChannelEditOptions): Promise<this>;
+  // public clone(options?: GuildChannelCloneOptions): Promise<this>;
+  // public delete(reason?: string): Promise<this>;
+  // public edit(options: GuildChannelEditOptions): Promise<this>;
   public equals(channel: GuildChannel): boolean;
-  public lockPermissions(): Promise<this>;
+  // public lockPermissions(): Promise<this>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public setName(name: string, reason?: string): Promise<this>;
-  public setParent(channel: CategoryChannelResolvable | null, options?: SetParentOptions): Promise<this>;
-  public setPosition(position: number, options?: SetChannelPositionOptions): Promise<this>;
+  // public setName(name: string, reason?: string): Promise<this>;
+  // public setParent(channel: CategoryChannelResolvable | null, options?: SetParentOptions): Promise<this>;
+  // public setPosition(position: number, options?: SetChannelPositionOptions): Promise<this>;
   public isTextBased(): this is GuildBasedChannel & TextBasedChannel;
   public toString(): ChannelMention;
 }
@@ -1583,11 +1587,11 @@ export class GuildEmoji extends BaseGuildEmoji {
   public guild: Guild;
   public author: User | null;
   public get roles(): GuildEmojiRoleManager;
-  public delete(reason?: string): Promise<GuildEmoji>;
-  public edit(options: GuildEmojiEditOptions): Promise<GuildEmoji>;
+  // public delete(reason?: string): Promise<GuildEmoji>;
+  // public edit(options: GuildEmojiEditOptions): Promise<GuildEmoji>;
   public equals(other: GuildEmoji | unknown): boolean;
-  public fetchAuthor(): Promise<User>;
-  public setName(name: string, reason?: string): Promise<GuildEmoji>;
+  // public fetchAuthor(): Promise<User>;
+  // public setName(name: string, reason?: string): Promise<GuildEmoji>;
 }
 
 export type GuildMemberFlagsString = keyof typeof GuildMemberFlags;
@@ -1630,22 +1634,22 @@ export class GuildMember extends Base {
   public user: User;
   public get voice(): VoiceState;
   public avatarURL(options?: ImageURLOptions): string | null;
-  public ban(options?: BanOptions): Promise<GuildMember>;
-  public disableCommunicationUntil(timeout: DateResolvable | null, reason?: string): Promise<GuildMember>;
-  public timeout(timeout: number | null, reason?: string): Promise<GuildMember>;
-  public fetch(force?: boolean): Promise<GuildMember>;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
+  // public ban(options?: BanOptions): Promise<GuildMember>;
+  // public disableCommunicationUntil(timeout: DateResolvable | null, reason?: string): Promise<GuildMember>;
+  // public timeout(timeout: number | null, reason?: string): Promise<GuildMember>;
+  // public fetch(force?: boolean): Promise<GuildMember>;
+  // public createDM(force?: boolean): Promise<DMChannel>;
+  // public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
-  public edit(options: GuildMemberEditOptions): Promise<GuildMember>;
+  // public edit(options: GuildMemberEditOptions): Promise<GuildMember>;
   public isCommunicationDisabled(): this is GuildMember & {
     communicationDisabledUntilTimestamp: number;
     readonly communicationDisabledUntil: Date;
   };
-  public kick(reason?: string): Promise<GuildMember>;
+  // public kick(reason?: string): Promise<GuildMember>;
   public permissionsIn(channel: GuildChannelResolvable): Readonly<PermissionsBitField>;
-  public setFlags(flags: GuildMemberFlagsResolvable, reason?: string): Promise<GuildMember>;
-  public setNickname(nickname: string | null, reason?: string): Promise<GuildMember>;
+  // public setFlags(flags: GuildMemberFlagsResolvable, reason?: string): Promise<GuildMember>;
+  // public setNickname(nickname: string | null, reason?: string): Promise<GuildMember>;
   public toJSON(): unknown;
   public toString(): UserMention;
   public valueOf(): string;
@@ -1706,7 +1710,7 @@ export class GuildPreview extends Base {
   public discoverySplashURL(options?: ImageURLOptions): string | null;
   public iconURL(options?: ImageURLOptions): string | null;
   public splashURL(options?: ImageURLOptions): string | null;
-  public fetch(): Promise<GuildPreview>;
+  // public fetch(): Promise<GuildPreview>;
   public toJSON(): unknown;
   public toString(): string;
 }
@@ -1739,26 +1743,26 @@ export class GuildScheduledEvent<Status extends GuildScheduledEventStatus = Guil
   public get partial(): false;
   public coverImageURL(options?: Readonly<BaseImageURLOptions>): string | null;
   public createInviteURL(options?: GuildScheduledEventInviteURLCreateOptions): Promise<string>;
-  public edit<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public fetch(force?: boolean): Promise<GuildScheduledEvent<Status>>;
-  public delete(): Promise<GuildScheduledEvent<Status>>;
-  public setName(name: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledStartTime(
-    scheduledStartTime: DateResolvable,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<Status>>;
-  public setScheduledEndTime(scheduledEndTime: DateResolvable, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setDescription(description: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public setStatus<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
-    status: AcceptableStatus,
-    reason?: string,
-  ): Promise<GuildScheduledEvent<AcceptableStatus>>;
-  public setLocation(location: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
-  public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
-    options?: Options,
-  ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
+  // public edit<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
+  //   options: GuildScheduledEventEditOptions<Status, AcceptableStatus>,
+  // ): Promise<GuildScheduledEvent<AcceptableStatus>>;
+  // public fetch(force?: boolean): Promise<GuildScheduledEvent<Status>>;
+  // public delete(): Promise<GuildScheduledEvent<Status>>;
+  // public setName(name: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setScheduledStartTime(
+  //   scheduledStartTime: DateResolvable,
+  //   reason?: string,
+  // ): Promise<GuildScheduledEvent<Status>>;
+  // public setScheduledEndTime(scheduledEndTime: DateResolvable, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setDescription(description: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public setStatus<AcceptableStatus extends GuildScheduledEventSetStatusArg<Status>>(
+  //   status: AcceptableStatus,
+  //   reason?: string,
+  // ): Promise<GuildScheduledEvent<AcceptableStatus>>;
+  // public setLocation(location: string, reason?: string): Promise<GuildScheduledEvent<Status>>;
+  // public fetchSubscribers<Options extends FetchGuildScheduledEventSubscribersOptions>(
+  //   options?: Options,
+  // ): Promise<GuildScheduledEventManagerFetchSubscribersResult<Options>>;
   public toString(): string;
   public isActive(): this is GuildScheduledEvent<GuildScheduledEventStatus.Active>;
   public isCanceled(): this is GuildScheduledEvent<GuildScheduledEventStatus.Canceled>;
@@ -1783,10 +1787,10 @@ export class GuildTemplate extends Base {
   public guildId: Snowflake;
   public serializedGuild: APITemplateSerializedSourceGuild;
   public unSynced: boolean | null;
-  public createGuild(name: string, icon?: BufferResolvable | Base64Resolvable): Promise<Guild>;
-  public delete(): Promise<GuildTemplate>;
-  public edit(options?: GuildTemplateEditOptions): Promise<GuildTemplate>;
-  public sync(): Promise<GuildTemplate>;
+  // public createGuild(name: string, icon?: BufferResolvable | Base64Resolvable): Promise<Guild>;
+  // public delete(): Promise<GuildTemplate>;
+  // public edit(options?: GuildTemplateEditOptions): Promise<GuildTemplate>;
+  // public sync(): Promise<GuildTemplate>;
   public static GuildTemplatesPattern: RegExp;
 }
 
@@ -1817,7 +1821,7 @@ export class Integration extends Base {
   public user: User | null;
   public subscriberCount: number | null;
   public revoked: boolean | null;
-  public delete(reason?: string): Promise<Integration>;
+  // public delete(reason?: string): Promise<Integration>;
 }
 
 export class IntegrationApplication extends Application {
@@ -1963,12 +1967,12 @@ export class InteractionWebhook {
   public constructor(client: Client<true>, id: Snowflake, token: string);
   public readonly client: Client<true>;
   public token: string;
-  public send(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
-  public editMessage(
-    message: MessageResolvable | '@original',
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<Message>;
-  public fetchMessage(message: Snowflake | '@original'): Promise<Message>;
+  // public send(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
+  // public editMessage(
+  //   message: MessageResolvable | '@original',
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<Message>;
+  // public fetchMessage(message: Snowflake | '@original'): Promise<Message>;
 }
 
 export class Invite extends Base {
@@ -2131,31 +2135,31 @@ export class Message<InGuild extends boolean = boolean> extends Base {
   public webhookId: Snowflake | null;
   public flags: Readonly<MessageFlagsBitField>;
   public reference: MessageReference | null;
-  public awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): Promise<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public awaitReactions(options?: AwaitReactionsOptions): Promise<Collection<Snowflake | string, MessageReaction>>;
-  public createReactionCollector(options?: ReactionCollectorOptions): ReactionCollector;
-  public createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageCollectorOptionsParams<ComponentType, InGuild>,
-  ): InteractionCollector<MappedInteractionTypes<InGuild>[ComponentType]>;
-  public delete(): Promise<Message<InGuild>>;
-  public edit(content: string | MessageEditOptions | MessagePayload): Promise<Message<InGuild>>;
+  // public awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, InGuild>,
+  // ): Promise<MappedInteractionTypes<InGuild>[ComponentType]>;
+  // public awaitReactions(options?: AwaitReactionsOptions): Promise<Collection<Snowflake | string, MessageReaction>>;
+  // public createReactionCollector(options?: ReactionCollectorOptions): ReactionCollector;
+  // public createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageCollectorOptionsParams<ComponentType, InGuild>,
+  // ): InteractionCollector<MappedInteractionTypes<InGuild>[ComponentType]>;
+  // public delete(): Promise<Message<InGuild>>;
+  // public edit(content: string | MessageEditOptions | MessagePayload): Promise<Message<InGuild>>;
   public equals(message: Message, rawData: unknown): boolean;
-  public fetchReference(): Promise<Message<InGuild>>;
-  public fetchWebhook(): Promise<Webhook>;
-  public crosspost(): Promise<Message<InGuild>>;
-  public fetch(force?: boolean): Promise<Message<InGuild>>;
-  public pin(reason?: string): Promise<Message<InGuild>>;
-  public react(emoji: EmojiIdentifierResolvable): Promise<MessageReaction>;
-  public removeAttachments(): Promise<Message<InGuild>>;
-  public reply(options: string | MessagePayload | MessageReplyOptions): Promise<Message<InGuild>>;
+  // public fetchReference(): Promise<Message<InGuild>>;
+  // public fetchWebhook(): Promise<Webhook>;
+  // public crosspost(): Promise<Message<InGuild>>;
+  // public fetch(force?: boolean): Promise<Message<InGuild>>;
+  // public pin(reason?: string): Promise<Message<InGuild>>;
+  // public react(emoji: EmojiIdentifierResolvable): Promise<MessageReaction>;
+  // public removeAttachments(): Promise<Message<InGuild>>;
+  // public reply(options: string | MessagePayload | MessageReplyOptions): Promise<Message<InGuild>>;
   public resolveComponent(customId: string): MessageActionRowComponent | null;
-  public startThread(options: StartThreadOptions): Promise<AnyThreadChannel>;
-  public suppressEmbeds(suppress?: boolean): Promise<Message<InGuild>>;
+  // public startThread(options: StartThreadOptions): Promise<AnyThreadChannel>;
+  // public suppressEmbeds(suppress?: boolean): Promise<Message<InGuild>>;
   public toJSON(): unknown;
   public toString(): string;
-  public unpin(reason?: string): Promise<Message<InGuild>>;
+  // public unpin(reason?: string): Promise<Message<InGuild>>;
   public inGuild(): this is Message<true>;
 }
 
@@ -2264,9 +2268,9 @@ export class MessageComponentInteraction<Cached extends CacheType = CacheType> e
   ): Promise<void>;
   /** @deprecated Sending a premium-style button is the new Discord behaviour. */
   public sendPremiumRequired(): Promise<void>;
-  public awaitModalSubmit(
-    options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
-  ): Promise<ModalSubmitInteraction<Cached>>;
+  // public awaitModalSubmit(
+  //   options: AwaitModalSubmitOptions<ModalSubmitInteraction>,
+  // ): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export class MessageContextMenuCommandInteraction<
@@ -2380,9 +2384,9 @@ export class MessageReaction {
   public message: Message | PartialMessage;
   public get partial(): false;
   public users: ReactionUserManager;
-  public react(): Promise<MessageReaction>;
-  public remove(): Promise<MessageReaction>;
-  public fetch(): Promise<MessageReaction>;
+  // public react(): Promise<MessageReaction>;
+  // public remove(): Promise<MessageReaction>;
+  // public fetch(): Promise<MessageReaction>;
   public toJSON(): unknown;
   public valueOf(): Snowflake | string;
 }
@@ -2540,23 +2544,23 @@ export abstract class ThreadOnlyChannel extends GuildChannel {
   public nsfw: boolean;
   public topic: string | null;
   public defaultSortOrder: SortOrderType | null;
-  public setAvailableTags(tags: readonly GuildForumTagData[], reason?: string): Promise<this>;
-  public setDefaultReactionEmoji(emojiId: DefaultReactionEmoji | null, reason?: string): Promise<this>;
-  public setDefaultThreadRateLimitPerUser(rateLimit: number, reason?: string): Promise<this>;
-  public createInvite(options?: InviteCreateOptions): Promise<Invite>;
-  public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
-  public setDefaultAutoArchiveDuration(
-    defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<this>;
-  public setTopic(topic: string | null, reason?: string): Promise<this>;
-  public setDefaultSortOrder(defaultSortOrder: SortOrderType | null, reason?: string): Promise<this>;
+  // public setAvailableTags(tags: readonly GuildForumTagData[], reason?: string): Promise<this>;
+  // public setDefaultReactionEmoji(emojiId: DefaultReactionEmoji | null, reason?: string): Promise<this>;
+  // public setDefaultThreadRateLimitPerUser(rateLimit: number, reason?: string): Promise<this>;
+  // public createInvite(options?: InviteCreateOptions): Promise<Invite>;
+  // public fetchInvites(cache?: boolean): Promise<Collection<string, Invite>>;
+  // public setDefaultAutoArchiveDuration(
+  //   defaultAutoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<this>;
+  // public setTopic(topic: string | null, reason?: string): Promise<this>;
+  // public setDefaultSortOrder(defaultSortOrder: SortOrderType | null, reason?: string): Promise<this>;
 }
 
 export class ForumChannel extends ThreadOnlyChannel {
   public type: ChannelType.GuildForum;
   public defaultForumLayout: ForumLayoutType;
-  public setDefaultForumLayout(defaultForumLayout: ForumLayoutType, reason?: string): Promise<this>;
+  // public setDefaultForumLayout(defaultForumLayout: ForumLayoutType, reason?: string): Promise<this>;
 }
 
 export class MediaChannel extends ThreadOnlyChannel {
@@ -2622,7 +2626,7 @@ export class Poll extends Base {
   public allowMultiselect: boolean;
   public layoutType: PollLayoutType;
   public resultsFinalized: boolean;
-  public end(): Promise<Message>;
+  // public end(): Promise<Message>;
 }
 
 export interface BaseFetchPollAnswerVotersOptions {
@@ -2718,22 +2722,22 @@ export class Role extends Base {
   public comparePositionTo(role: RoleResolvable): number;
   public icon: string | null;
   public unicodeEmoji: string | null;
-  public delete(reason?: string): Promise<Role>;
-  public edit(options: RoleEditOptions): Promise<Role>;
+  // public delete(reason?: string): Promise<Role>;
+  // public edit(options: RoleEditOptions): Promise<Role>;
   public equals(role: Role): boolean;
   public iconURL(options?: ImageURLOptions): string | null;
   public permissionsIn(
     channel: NonThreadGuildBasedChannel | Snowflake,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField>;
-  public setColor(color: ColorResolvable, reason?: string): Promise<Role>;
-  public setHoist(hoist?: boolean, reason?: string): Promise<Role>;
-  public setMentionable(mentionable?: boolean, reason?: string): Promise<Role>;
-  public setName(name: string, reason?: string): Promise<Role>;
-  public setPermissions(permissions: PermissionResolvable, reason?: string): Promise<Role>;
-  public setIcon(icon: BufferResolvable | Base64Resolvable | EmojiResolvable | null, reason?: string): Promise<Role>;
-  public setPosition(position: number, options?: SetRolePositionOptions): Promise<Role>;
-  public setUnicodeEmoji(unicodeEmoji: string | null, reason?: string): Promise<Role>;
+  // public setColor(color: ColorResolvable, reason?: string): Promise<Role>;
+  // public setHoist(hoist?: boolean, reason?: string): Promise<Role>;
+  // public setMentionable(mentionable?: boolean, reason?: string): Promise<Role>;
+  // public setName(name: string, reason?: string): Promise<Role>;
+  // public setPermissions(permissions: PermissionResolvable, reason?: string): Promise<Role>;
+  // public setIcon(icon: BufferResolvable | Base64Resolvable | EmojiResolvable | null, reason?: string): Promise<Role>;
+  // public setPosition(position: number, options?: SetRolePositionOptions): Promise<Role>;
+  // public setUnicodeEmoji(unicodeEmoji: string | null, reason?: string): Promise<Role>;
   public toJSON(): unknown;
   public toString(): RoleMention;
 }
@@ -3026,7 +3030,7 @@ export class StageChannel extends BaseGuildVoiceChannel {
   public topic: string | null;
   public type: ChannelType.GuildStageVoice;
   public createStageInstance(options: StageInstanceCreateOptions): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageChannel>;
+  // public setTopic(topic: string): Promise<StageChannel>;
 }
 
 export class DirectoryChannel extends BaseChannel {
@@ -3050,9 +3054,9 @@ export class StageInstance extends Base {
   public get channel(): StageChannel | null;
   public get guild(): Guild | null;
   public get guildScheduledEvent(): GuildScheduledEvent | null;
-  public edit(options: StageInstanceEditOptions): Promise<StageInstance>;
-  public delete(): Promise<StageInstance>;
-  public setTopic(topic: string): Promise<StageInstance>;
+  // public edit(options: StageInstanceEditOptions): Promise<StageInstance>;
+  // public delete(): Promise<StageInstance>;
+  // public setTopic(topic: string): Promise<StageInstance>;
   public get createdTimestamp(): number;
   public get createdAt(): Date;
 }
@@ -3075,11 +3079,11 @@ export class Sticker extends Base {
   public type: StickerType | null;
   public user: User | null;
   public get url(): string;
-  public fetch(): Promise<Sticker>;
-  public fetchPack(): Promise<StickerPack | null>;
-  public fetchUser(): Promise<User | null>;
-  public edit(options?: GuildStickerEditOptions): Promise<Sticker>;
-  public delete(reason?: string): Promise<Sticker>;
+  // public fetch(): Promise<Sticker>;
+  // public fetchPack(): Promise<StickerPack | null>;
+  // public fetchUser(): Promise<User | null>;
+  // public edit(options?: GuildStickerEditOptions): Promise<Sticker>;
+  // public delete(reason?: string): Promise<Sticker>;
   public equals(other: Sticker | unknown): boolean;
 }
 
@@ -3261,29 +3265,29 @@ export class ThreadChannel<ThreadOnly extends boolean = boolean> extends BaseCha
   public rateLimitPerUser: number | null;
   public type: ThreadChannelType;
   public get unarchivable(): boolean;
-  public delete(reason?: string): Promise<this>;
-  public edit(options: ThreadEditOptions): Promise<AnyThreadChannel>;
-  public join(): Promise<AnyThreadChannel>;
-  public leave(): Promise<AnyThreadChannel>;
+  // public delete(reason?: string): Promise<this>;
+  // public edit(options: ThreadEditOptions): Promise<AnyThreadChannel>;
+  // public join(): Promise<AnyThreadChannel>;
+  // public leave(): Promise<AnyThreadChannel>;
   public permissionsFor(memberOrRole: GuildMember | Role, checkAdmin?: boolean): Readonly<PermissionsBitField>;
   public permissionsFor(
     memberOrRole: GuildMemberResolvable | RoleResolvable,
     checkAdmin?: boolean,
   ): Readonly<PermissionsBitField> | null;
-  public fetchOwner(options?: BaseFetchOptions): Promise<ThreadMember | null>;
-  public fetchStarterMessage(options?: BaseFetchOptions): Promise<Message<true> | null>;
-  public setArchived(archived?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setAutoArchiveDuration(
-    autoArchiveDuration: ThreadAutoArchiveDuration,
-    reason?: string,
-  ): Promise<AnyThreadChannel>;
-  public setInvitable(invitable?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setLocked(locked?: boolean, reason?: string): Promise<AnyThreadChannel>;
-  public setName(name: string, reason?: string): Promise<AnyThreadChannel>;
+  // public fetchOwner(options?: BaseFetchOptions): Promise<ThreadMember | null>;
+  // public fetchStarterMessage(options?: BaseFetchOptions): Promise<Message<true> | null>;
+  // public setArchived(archived?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setAutoArchiveDuration(
+  //   autoArchiveDuration: ThreadAutoArchiveDuration,
+  //   reason?: string,
+  // ): Promise<AnyThreadChannel>;
+  // public setInvitable(invitable?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setLocked(locked?: boolean, reason?: string): Promise<AnyThreadChannel>;
+  // public setName(name: string, reason?: string): Promise<AnyThreadChannel>;
   // The following 3 methods can only be run on forum threads.
-  public setAppliedTags(appliedTags: readonly Snowflake[], reason?: string): Promise<ThreadChannel<true>>;
-  public pin(reason?: string): Promise<ThreadChannel<true>>;
-  public unpin(reason?: string): Promise<ThreadChannel<true>>;
+  // public setAppliedTags(appliedTags: readonly Snowflake[], reason?: string): Promise<ThreadChannel<true>>;
+  // public pin(reason?: string): Promise<ThreadChannel<true>>;
+  // public unpin(reason?: string): Promise<ThreadChannel<true>>;
   public toString(): ChannelMention;
 }
 
@@ -3299,7 +3303,7 @@ export class ThreadMember<HasMemberData extends boolean = boolean> extends Base
   public thread: AnyThreadChannel;
   public get user(): User | null;
   public get partial(): false;
-  public remove(reason?: string): Promise<ThreadMember>;
+  // public remove(reason?: string): Promise<ThreadMember>;
 }
 
 export type ThreadMemberFlagsString = keyof typeof ThreadMemberFlags;
@@ -3358,12 +3362,12 @@ export class User extends Base {
   public avatarURL(options?: ImageURLOptions): string | null;
   public avatarDecorationURL(options?: BaseImageURLOptions): string | null;
   public bannerURL(options?: ImageURLOptions): string | null | undefined;
-  public createDM(force?: boolean): Promise<DMChannel>;
-  public deleteDM(): Promise<DMChannel>;
+  // public createDM(force?: boolean): Promise<DMChannel>;
+  // public deleteDM(): Promise<DMChannel>;
   public displayAvatarURL(options?: ImageURLOptions): string;
   public equals(user: User): boolean;
-  public fetch(force?: boolean): Promise<User>;
-  public fetchFlags(force?: boolean): Promise<UserFlagsBitField>;
+  // public fetch(force?: boolean): Promise<User>;
+  // public fetchFlags(force?: boolean): Promise<UserFlagsBitField>;
   public toString(): UserMention;
 }
 
@@ -3582,13 +3586,13 @@ export class VoiceState extends Base {
   public suppress: boolean | null;
   public requestToSpeakTimestamp: number | null;
 
-  public setDeaf(deaf?: boolean, reason?: string): Promise<GuildMember>;
-  public setMute(mute?: boolean, reason?: string): Promise<GuildMember>;
-  public disconnect(reason?: string): Promise<GuildMember>;
-  public setChannel(channel: GuildVoiceChannelResolvable | null, reason?: string): Promise<GuildMember>;
-  public setRequestToSpeak(request?: boolean): Promise<this>;
-  public setSuppressed(suppressed?: boolean): Promise<this>;
-  public edit(options: VoiceStateEditOptions): Promise<this>;
+  // public setDeaf(deaf?: boolean, reason?: string): Promise<GuildMember>;
+  // public setMute(mute?: boolean, reason?: string): Promise<GuildMember>;
+  // public disconnect(reason?: string): Promise<GuildMember>;
+  // public setChannel(channel: GuildVoiceChannelResolvable | null, reason?: string): Promise<GuildMember>;
+  // public setRequestToSpeak(request?: boolean): Promise<this>;
+  // public setSuppressed(suppressed?: boolean): Promise<this>;
+  // public edit(options: VoiceStateEditOptions): Promise<this>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3619,12 +3623,12 @@ export class Webhook<Type extends WebhookType = WebhookType> {
   public isIncoming(): this is Webhook<WebhookType.Incoming>;
   public isChannelFollower(): this is Webhook<WebhookType.ChannelFollower>;
 
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<Message>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<Message>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<Message>;
+  // public editMessage(
+  //   message: MessageResolvable,
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<Message>;
+  // public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<Message>;
+  // public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<Message>;
 }
 
 // tslint:disable-next-line no-empty-interface
@@ -3634,12 +3638,12 @@ export class WebhookClient extends BaseClient {
   public readonly client: this;
   public options: WebhookClientOptions;
   public token: string;
-  public editMessage(
-    message: MessageResolvable,
-    options: string | MessagePayload | WebhookMessageEditOptions,
-  ): Promise<APIMessage>;
-  public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<APIMessage>;
-  public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<APIMessage>;
+  // public editMessage(
+  //   message: MessageResolvable,
+  //   options: string | MessagePayload | WebhookMessageEditOptions,
+  // ): Promise<APIMessage>;
+  // public fetchMessage(message: Snowflake, options?: WebhookFetchMessageOptions): Promise<APIMessage>;
+  // public send(options: string | MessagePayload | WebhookMessageCreateOptions): Promise<APIMessage>;
 }
 
 export class WebSocketManager extends EventEmitter {
@@ -3709,7 +3713,7 @@ export class WebSocketShard extends EventEmitter {
 export class Widget extends Base {
   private constructor(client: Client<true>, data: RawWidgetData);
   private _patch(data: RawWidgetData): void;
-  public fetch(): Promise<Widget>;
+  // public fetch(): Promise<Widget>;
   public imageURL(style?: GuildWidgetStyle): string;
   public id: Snowflake;
   public name: string;
@@ -4614,23 +4618,23 @@ export interface TextBasedChannelFields<InGuild extends boolean = boolean>
   lastPinTimestamp: number | null;
   get lastPinAt(): Date | null;
   messages: If<InGuild, GuildMessageManager, DMMessageManager>;
-  awaitMessageComponent<ComponentType extends MessageComponentType>(
-    options?: AwaitMessageCollectorOptionsParams<ComponentType, true>,
-  ): Promise<MappedInteractionTypes[ComponentType]>;
-  awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<Snowflake, Message>>;
-  bulkDelete(
-    messages: Collection<Snowflake, Message> | readonly MessageResolvable[] | number,
-    filterOld?: boolean,
-  ): Promise<Collection<Snowflake, Message | PartialMessage | undefined>>;
-  createMessageComponentCollector<ComponentType extends MessageComponentType>(
-    options?: MessageChannelCollectorOptionsParams<ComponentType, true>,
-  ): InteractionCollector<MappedInteractionTypes[ComponentType]>;
-  createMessageCollector(options?: MessageCollectorOptions): MessageCollector;
-  createWebhook(options: ChannelWebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
-  fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
-  sendTyping(): Promise<void>;
-  setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this>;
-  setNSFW(nsfw?: boolean, reason?: string): Promise<this>;
+  // awaitMessageComponent<ComponentType extends MessageComponentType>(
+  //   options?: AwaitMessageCollectorOptionsParams<ComponentType, true>,
+  // ): Promise<MappedInteractionTypes[ComponentType]>;
+  // awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<Snowflake, Message>>;
+  // bulkDelete(
+  //   messages: Collection<Snowflake, Message> | readonly MessageResolvable[] | number,
+  //   filterOld?: boolean,
+  // ): Promise<Collection<Snowflake, Message | PartialMessage | undefined>>;
+  // createMessageComponentCollector<ComponentType extends MessageComponentType>(
+  //   options?: MessageChannelCollectorOptionsParams<ComponentType, true>,
+  // ): InteractionCollector<MappedInteractionTypes[ComponentType]>;
+  // createMessageCollector(options?: MessageCollectorOptions): MessageCollector;
+  // createWebhook(options: ChannelWebhookCreateOptions): Promise<Webhook<WebhookType.Incoming>>;
+  // fetchWebhooks(): Promise<Collection<Snowflake, Webhook<WebhookType.ChannelFollower | WebhookType.Incoming>>>;
+  // sendTyping(): Promise<void>;
+  // setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this>;
+  // setNSFW(nsfw?: boolean, reason?: string): Promise<this>;
 }
 
 /** @internal */

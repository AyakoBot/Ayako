services:
 redis:
  image: redis:7.4
  restart: unless-stopped
  ports:
   - "127.0.0.1:6379:6379"
  command: redis-server /usr/local/etc/redis/redis.conf
  volumes:
   - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
  ulimits:
   nproc: 65535
   nofile:
    soft: 65535
    hard: 65535
  sysctls:
   net.core.somaxconn: 1024
  deploy:
   resources:
    limits:
     cpus: "4"
     memory: 8G
    reservations:
     cpus: "2"
     memory: 4G

 postgres:
  image: postgres:16.4
  restart: unless-stopped
  environment:
   POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
  ports:
   - "127.0.0.15432:5432"
  volumes:
   - db-data:/var/lib/postgresql/data

 nirn:
  image: ghcr.io/germanoeich/nirn-proxy:v1.3.3
  restart: unless-stopped
  environment:
   REQUEST_TIMEOUT: 15000

 ayako-dev:
  build:
   context: .
   dockerfile: ./packages/Bot/Dockerfile
  working_dir: /app/packages/Bot
  command: ["pnpm", "dev"]
  restart: unless-stopped
  depends_on:
   - postgres
   - redis
   - nirn

 ayako:
  build:
   context: .
   dockerfile: ./packages/Bot/Dockerfile
  working_dir: /app/packages/Bot
  command: ["pnpm", "start"]
  restart: unless-stopped
  depends_on:
   - postgres
   - redis
   - nirn
  volumes:
   - ./packages/Bot/logs:/app/packages/Bot/logs

 api:
  build:
   context: .
   dockerfile: ./packages/Server/Dockerfile
  working_dir: /app/packages/Server
  restart: unless-stopped
  command: ["pnpm", "start"]
  depends_on:
   - postgres
   - redis

 psqlExporter:
  image: quay.io/prometheuscommunity/postgres-exporter
  restart: unless-stopped
  environment:
   DATA_SOURCE_URI: "postgres:5432/postgres?sslmode=disable"
   DATA_SOURCE_USER: ${DATABASE_USER_READONLY}
   DATA_SOURCE_PASS: ${DATABASE_PASSWORD}
  depends_on:
   - postgres

 cloudflared:
  image: cloudflare/cloudflared:latest
  command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
  restart: unless-stopped

 grafana:
  image: grafana/grafana:latest
  restart: unless-stopped
  volumes:
   - grafana-data:/var/lib/grafana
   - ./configs/dashboards:/etc/grafana/provisioning/dashboards
   - ./configs/datasources:/etc/grafana/provisioning/datasources
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
    - GF_SECURITY_ADMIN_USER=admin

 prometheus:
  image: prom/prometheus
  restart: unless-stopped
  volumes:
   - prometheus-data:/prometheus
   - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
 db-data:
 grafana-data:
 prometheus-data:
